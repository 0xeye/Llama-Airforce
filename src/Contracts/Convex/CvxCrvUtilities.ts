/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CvxCrvUtilitiesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountExtraRewardRates"
      | "accountRewardRates"
      | "apr"
      | "convexProxy"
      | "crv"
      | "cvx"
      | "cvxCrvStaking"
      | "cvxMining"
      | "externalRewardContracts"
      | "extraRewardRates"
      | "mainRewardRates"
      | "singleRewardRate"
      | "stkcvxcrv"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountExtraRewardRates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "accountRewardRates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "apr",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convexProxy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "crv", values?: undefined): string;
  encodeFunctionData(functionFragment: "cvx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cvxCrvStaking",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cvxMining", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "externalRewardContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraRewardRates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainRewardRates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "singleRewardRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "stkcvxcrv", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "accountExtraRewardRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountRewardRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "apr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convexProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cvx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cvxCrvStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cvxMining", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "externalRewardContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraRewardRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainRewardRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singleRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stkcvxcrv", data: BytesLike): Result;
}

export interface CvxCrvUtilities extends BaseContract {
  connect(runner?: ContractRunner | null): CvxCrvUtilities;
  waitForDeployment(): Promise<this>;

  interface: CvxCrvUtilitiesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountExtraRewardRates: TypedContractMethod<
    [_account: AddressLike],
    [
      [string[], bigint[], bigint[]] & {
        tokens: string[];
        rates: bigint[];
        groups: bigint[];
      }
    ],
    "view"
  >;

  accountRewardRates: TypedContractMethod<
    [_account: AddressLike],
    [
      [string[], bigint[], bigint[]] & {
        tokens: string[];
        rates: bigint[];
        groups: bigint[];
      }
    ],
    "view"
  >;

  apr: TypedContractMethod<
    [
      _rate: BigNumberish,
      _priceOfReward: BigNumberish,
      _priceOfDeposit: BigNumberish
    ],
    [bigint],
    "view"
  >;

  convexProxy: TypedContractMethod<[], [string], "view">;

  crv: TypedContractMethod<[], [string], "view">;

  cvx: TypedContractMethod<[], [string], "view">;

  cvxCrvStaking: TypedContractMethod<[], [string], "view">;

  cvxMining: TypedContractMethod<[], [string], "view">;

  externalRewardContracts: TypedContractMethod<[], [string[]], "view">;

  extraRewardRates: TypedContractMethod<
    [],
    [
      [string[], bigint[], bigint[]] & {
        tokens: string[];
        rates: bigint[];
        groups: bigint[];
      }
    ],
    "view"
  >;

  mainRewardRates: TypedContractMethod<
    [],
    [
      [string[], bigint[], bigint[]] & {
        tokens: string[];
        rates: bigint[];
        groups: bigint[];
      }
    ],
    "view"
  >;

  singleRewardRate: TypedContractMethod<
    [_rewardContract: AddressLike],
    [[string, bigint] & { token: string; rate: bigint }],
    "view"
  >;

  stkcvxcrv: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountExtraRewardRates"
  ): TypedContractMethod<
    [_account: AddressLike],
    [
      [string[], bigint[], bigint[]] & {
        tokens: string[];
        rates: bigint[];
        groups: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "accountRewardRates"
  ): TypedContractMethod<
    [_account: AddressLike],
    [
      [string[], bigint[], bigint[]] & {
        tokens: string[];
        rates: bigint[];
        groups: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "apr"
  ): TypedContractMethod<
    [
      _rate: BigNumberish,
      _priceOfReward: BigNumberish,
      _priceOfDeposit: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "convexProxy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "crv"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cvx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cvxCrvStaking"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cvxMining"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "externalRewardContracts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "extraRewardRates"
  ): TypedContractMethod<
    [],
    [
      [string[], bigint[], bigint[]] & {
        tokens: string[];
        rates: bigint[];
        groups: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "mainRewardRates"
  ): TypedContractMethod<
    [],
    [
      [string[], bigint[], bigint[]] & {
        tokens: string[];
        rates: bigint[];
        groups: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "singleRewardRate"
  ): TypedContractMethod<
    [_rewardContract: AddressLike],
    [[string, bigint] & { token: string; rate: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "stkcvxcrv"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
