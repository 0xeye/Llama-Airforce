/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface GaugeVotePlatformInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "createProposal(bytes32,uint256,uint256)": FunctionFragment;
    "forceEndProposal()": FunctionFragment;
    "gaugeRegistry()": FunctionFragment;
    "gaugeTotals(uint256,address)": FunctionFragment;
    "getVote(uint256,address)": FunctionFragment;
    "getVoterAtIndex(uint256,uint256)": FunctionFragment;
    "getVoterCount(uint256)": FunctionFragment;
    "isProofSupplied(uint256,address)": FunctionFragment;
    "max_weight()": FunctionFragment;
    "operators(address)": FunctionFragment;
    "overtime()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingowner()": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "setOperator(address,bool)": FunctionFragment;
    "setOvertimeAccount(address,bool)": FunctionFragment;
    "supplyProofs(address,bytes32[],uint256,int256,address)": FunctionFragment;
    "surrogateRegistry()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateUserWeight(uint256,address,uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "userManager()": FunctionFragment;
    "vote(address,address[],uint256[])": FunctionFragment;
    "voteWithProofs(address,address[],uint256[],bytes32[],uint256,int256,address)": FunctionFragment;
    "votedUsers(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "createProposal"
      | "forceEndProposal"
      | "gaugeRegistry"
      | "gaugeTotals"
      | "getVote"
      | "getVoterAtIndex"
      | "getVoterCount"
      | "isProofSupplied"
      | "max_weight"
      | "operators"
      | "overtime"
      | "owner"
      | "pendingowner"
      | "proposalCount"
      | "proposals"
      | "setOperator"
      | "setOvertimeAccount"
      | "supplyProofs"
      | "surrogateRegistry"
      | "transferOwnership"
      | "updateUserWeight"
      | "userInfo"
      | "userManager"
      | "vote"
      | "voteWithProofs"
      | "votedUsers"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceEndProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gaugeRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gaugeTotals",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterAtIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isProofSupplied",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "max_weight",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "operators", values: [string]): string;
  encodeFunctionData(functionFragment: "overtime", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingowner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOvertimeAccount",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyProofs",
    values: [string, BytesLike[], BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "surrogateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserWeight",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "voteWithProofs",
    values: [
      string,
      string[],
      BigNumberish[],
      BytesLike[],
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "votedUsers",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceEndProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gaugeRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gaugeTotals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVoterAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProofSupplied",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "max_weight", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "overtime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingowner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOvertimeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "surrogateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteWithProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votedUsers", data: BytesLike): Result;

  events: {
    "AcceptedOwnership(address)": EventFragment;
    "EqualizerAccountSet(address,bool)": EventFragment;
    "ForceEndProposal(uint256)": EventFragment;
    "GaugeTotalChange(uint256,address,uint256)": EventFragment;
    "NewProposal(uint256,bytes32,uint256,uint256)": EventFragment;
    "OperatorSet(address,bool)": EventFragment;
    "TransferOwnership(address)": EventFragment;
    "UserWeightChange(uint256,address,uint256,int256)": EventFragment;
    "VoteCast(uint256,address,address[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptedOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EqualizerAccountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceEndProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GaugeTotalChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserWeightChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export interface AcceptedOwnershipEventObject {
  newOwner: string;
}
export type AcceptedOwnershipEvent = TypedEvent<
  [string],
  AcceptedOwnershipEventObject
>;

export type AcceptedOwnershipEventFilter =
  TypedEventFilter<AcceptedOwnershipEvent>;

export interface EqualizerAccountSetEventObject {
  eq: string;
  active: boolean;
}
export type EqualizerAccountSetEvent = TypedEvent<
  [string, boolean],
  EqualizerAccountSetEventObject
>;

export type EqualizerAccountSetEventFilter =
  TypedEventFilter<EqualizerAccountSetEvent>;

export interface ForceEndProposalEventObject {
  id: BigNumber;
}
export type ForceEndProposalEvent = TypedEvent<
  [BigNumber],
  ForceEndProposalEventObject
>;

export type ForceEndProposalEventFilter =
  TypedEventFilter<ForceEndProposalEvent>;

export interface GaugeTotalChangeEventObject {
  pid: BigNumber;
  gauge: string;
  newWeight: BigNumber;
}
export type GaugeTotalChangeEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  GaugeTotalChangeEventObject
>;

export type GaugeTotalChangeEventFilter =
  TypedEventFilter<GaugeTotalChangeEvent>;

export interface NewProposalEventObject {
  id: BigNumber;
  merkle: string;
  start: BigNumber;
  end: BigNumber;
}
export type NewProposalEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  NewProposalEventObject
>;

export type NewProposalEventFilter = TypedEventFilter<NewProposalEvent>;

export interface OperatorSetEventObject {
  op: string;
  active: boolean;
}
export type OperatorSetEvent = TypedEvent<
  [string, boolean],
  OperatorSetEventObject
>;

export type OperatorSetEventFilter = TypedEventFilter<OperatorSetEvent>;

export interface TransferOwnershipEventObject {
  pendingOwner: string;
}
export type TransferOwnershipEvent = TypedEvent<
  [string],
  TransferOwnershipEventObject
>;

export type TransferOwnershipEventFilter =
  TypedEventFilter<TransferOwnershipEvent>;

export interface UserWeightChangeEventObject {
  pid: BigNumber;
  user: string;
  baseWeight: BigNumber;
  adjustedWeight: BigNumber;
}
export type UserWeightChangeEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  UserWeightChangeEventObject
>;

export type UserWeightChangeEventFilter =
  TypedEventFilter<UserWeightChangeEvent>;

export interface VoteCastEventObject {
  proposalId: BigNumber;
  user: string;
  gauges: string[];
  weights: BigNumber[];
}
export type VoteCastEvent = TypedEvent<
  [BigNumber, string, string[], BigNumber[]],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface GaugeVotePlatform extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GaugeVotePlatformInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createProposal(
      _baseWeightMerkleRoot: BytesLike,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forceEndProposal(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    gaugeRegistry(overrides?: CallOverrides): Promise<[string]>;

    gaugeTotals(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVote(
      _proposalId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], boolean, BigNumber, BigNumber] & {
        gauges: string[];
        weights: BigNumber[];
        voted: boolean;
        baseWeight: BigNumber;
        adjustedWeight: BigNumber;
      }
    >;

    getVoterAtIndex(
      _proposalId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoterCount(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isProofSupplied(
      _proposalId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    max_weight(overrides?: CallOverrides): Promise<[BigNumber]>;

    operators(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    overtime(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingowner(overrides?: CallOverrides): Promise<[string]>;

    proposalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        baseWeightMerkleRoot: string;
        startTime: BigNumber;
        endTime: BigNumber;
      }
    >;

    setOperator(
      _op: string,
      _active: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOvertimeAccount(
      _eq: string,
      _active: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supplyProofs(
      _account: string,
      proofs: BytesLike[],
      _baseWeight: BigNumberish,
      _adjustedWeight: BigNumberish,
      _delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    surrogateRegistry(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateUserWeight(
      _proposalId: BigNumberish,
      _user: string,
      _newWeight: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, number] & {
        baseWeight: BigNumber;
        adjustedWeight: BigNumber;
        pendingWeight: BigNumber;
        delegate: string;
        voteStatus: number;
      }
    >;

    userManager(overrides?: CallOverrides): Promise<[string]>;

    vote(
      _account: string,
      _gauges: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    voteWithProofs(
      _account: string,
      _gauges: string[],
      _weights: BigNumberish[],
      proofs: BytesLike[],
      _baseWeight: BigNumberish,
      _adjustedWeight: BigNumberish,
      _delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    votedUsers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createProposal(
    _baseWeightMerkleRoot: BytesLike,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forceEndProposal(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  gaugeRegistry(overrides?: CallOverrides): Promise<string>;

  gaugeTotals(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVote(
    _proposalId: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], boolean, BigNumber, BigNumber] & {
      gauges: string[];
      weights: BigNumber[];
      voted: boolean;
      baseWeight: BigNumber;
      adjustedWeight: BigNumber;
    }
  >;

  getVoterAtIndex(
    _proposalId: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoterCount(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isProofSupplied(
    _proposalId: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  max_weight(overrides?: CallOverrides): Promise<BigNumber>;

  operators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  overtime(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingowner(overrides?: CallOverrides): Promise<string>;

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      baseWeightMerkleRoot: string;
      startTime: BigNumber;
      endTime: BigNumber;
    }
  >;

  setOperator(
    _op: string,
    _active: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOvertimeAccount(
    _eq: string,
    _active: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supplyProofs(
    _account: string,
    proofs: BytesLike[],
    _baseWeight: BigNumberish,
    _adjustedWeight: BigNumberish,
    _delegate: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  surrogateRegistry(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateUserWeight(
    _proposalId: BigNumberish,
    _user: string,
    _newWeight: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, number] & {
      baseWeight: BigNumber;
      adjustedWeight: BigNumber;
      pendingWeight: BigNumber;
      delegate: string;
      voteStatus: number;
    }
  >;

  userManager(overrides?: CallOverrides): Promise<string>;

  vote(
    _account: string,
    _gauges: string[],
    _weights: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  voteWithProofs(
    _account: string,
    _gauges: string[],
    _weights: BigNumberish[],
    proofs: BytesLike[],
    _baseWeight: BigNumberish,
    _adjustedWeight: BigNumberish,
    _delegate: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  votedUsers(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    createProposal(
      _baseWeightMerkleRoot: BytesLike,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceEndProposal(overrides?: CallOverrides): Promise<void>;

    gaugeRegistry(overrides?: CallOverrides): Promise<string>;

    gaugeTotals(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVote(
      _proposalId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], boolean, BigNumber, BigNumber] & {
        gauges: string[];
        weights: BigNumber[];
        voted: boolean;
        baseWeight: BigNumber;
        adjustedWeight: BigNumber;
      }
    >;

    getVoterAtIndex(
      _proposalId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoterCount(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProofSupplied(
      _proposalId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    max_weight(overrides?: CallOverrides): Promise<BigNumber>;

    operators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    overtime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingowner(overrides?: CallOverrides): Promise<string>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        baseWeightMerkleRoot: string;
        startTime: BigNumber;
        endTime: BigNumber;
      }
    >;

    setOperator(
      _op: string,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setOvertimeAccount(
      _eq: string,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supplyProofs(
      _account: string,
      proofs: BytesLike[],
      _baseWeight: BigNumberish,
      _adjustedWeight: BigNumberish,
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    surrogateRegistry(overrides?: CallOverrides): Promise<string>;

    transferOwnership(_owner: string, overrides?: CallOverrides): Promise<void>;

    updateUserWeight(
      _proposalId: BigNumberish,
      _user: string,
      _newWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, number] & {
        baseWeight: BigNumber;
        adjustedWeight: BigNumber;
        pendingWeight: BigNumber;
        delegate: string;
        voteStatus: number;
      }
    >;

    userManager(overrides?: CallOverrides): Promise<string>;

    vote(
      _account: string,
      _gauges: string[],
      _weights: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    voteWithProofs(
      _account: string,
      _gauges: string[],
      _weights: BigNumberish[],
      proofs: BytesLike[],
      _baseWeight: BigNumberish,
      _adjustedWeight: BigNumberish,
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    votedUsers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AcceptedOwnership(address)"(newOwner?: null): AcceptedOwnershipEventFilter;
    AcceptedOwnership(newOwner?: null): AcceptedOwnershipEventFilter;

    "EqualizerAccountSet(address,bool)"(
      eq?: string | null,
      active?: null
    ): EqualizerAccountSetEventFilter;
    EqualizerAccountSet(
      eq?: string | null,
      active?: null
    ): EqualizerAccountSetEventFilter;

    "ForceEndProposal(uint256)"(
      id?: BigNumberish | null
    ): ForceEndProposalEventFilter;
    ForceEndProposal(id?: BigNumberish | null): ForceEndProposalEventFilter;

    "GaugeTotalChange(uint256,address,uint256)"(
      pid?: BigNumberish | null,
      gauge?: string | null,
      newWeight?: null
    ): GaugeTotalChangeEventFilter;
    GaugeTotalChange(
      pid?: BigNumberish | null,
      gauge?: string | null,
      newWeight?: null
    ): GaugeTotalChangeEventFilter;

    "NewProposal(uint256,bytes32,uint256,uint256)"(
      id?: BigNumberish | null,
      merkle?: null,
      start?: null,
      end?: null
    ): NewProposalEventFilter;
    NewProposal(
      id?: BigNumberish | null,
      merkle?: null,
      start?: null,
      end?: null
    ): NewProposalEventFilter;

    "OperatorSet(address,bool)"(
      op?: string | null,
      active?: null
    ): OperatorSetEventFilter;
    OperatorSet(op?: string | null, active?: null): OperatorSetEventFilter;

    "TransferOwnership(address)"(
      pendingOwner?: null
    ): TransferOwnershipEventFilter;
    TransferOwnership(pendingOwner?: null): TransferOwnershipEventFilter;

    "UserWeightChange(uint256,address,uint256,int256)"(
      pid?: BigNumberish | null,
      user?: string | null,
      baseWeight?: null,
      adjustedWeight?: null
    ): UserWeightChangeEventFilter;
    UserWeightChange(
      pid?: BigNumberish | null,
      user?: string | null,
      baseWeight?: null,
      adjustedWeight?: null
    ): UserWeightChangeEventFilter;

    "VoteCast(uint256,address,address[],uint256[])"(
      proposalId?: BigNumberish | null,
      user?: string | null,
      gauges?: null,
      weights?: null
    ): VoteCastEventFilter;
    VoteCast(
      proposalId?: BigNumberish | null,
      user?: string | null,
      gauges?: null,
      weights?: null
    ): VoteCastEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createProposal(
      _baseWeightMerkleRoot: BytesLike,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forceEndProposal(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    gaugeRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    gaugeTotals(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVote(
      _proposalId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterAtIndex(
      _proposalId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterCount(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProofSupplied(
      _proposalId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    max_weight(overrides?: CallOverrides): Promise<BigNumber>;

    operators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    overtime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingowner(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOperator(
      _op: string,
      _active: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOvertimeAccount(
      _eq: string,
      _active: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supplyProofs(
      _account: string,
      proofs: BytesLike[],
      _baseWeight: BigNumberish,
      _adjustedWeight: BigNumberish,
      _delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    surrogateRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateUserWeight(
      _proposalId: BigNumberish,
      _user: string,
      _newWeight: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userManager(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _account: string,
      _gauges: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    voteWithProofs(
      _account: string,
      _gauges: string[],
      _weights: BigNumberish[],
      proofs: BytesLike[],
      _baseWeight: BigNumberish,
      _adjustedWeight: BigNumberish,
      _delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    votedUsers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createProposal(
      _baseWeightMerkleRoot: BytesLike,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forceEndProposal(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    gaugeRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gaugeTotals(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVote(
      _proposalId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterAtIndex(
      _proposalId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterCount(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProofSupplied(
      _proposalId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    max_weight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    overtime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingowner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOperator(
      _op: string,
      _active: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOvertimeAccount(
      _eq: string,
      _active: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supplyProofs(
      _account: string,
      proofs: BytesLike[],
      _baseWeight: BigNumberish,
      _adjustedWeight: BigNumberish,
      _delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    surrogateRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateUserWeight(
      _proposalId: BigNumberish,
      _user: string,
      _newWeight: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _account: string,
      _gauges: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    voteWithProofs(
      _account: string,
      _gauges: string[],
      _weights: BigNumberish[],
      proofs: BytesLike[],
      _baseWeight: BigNumberish,
      _adjustedWeight: BigNumberish,
      _delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    votedUsers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
