/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CvxFxsStaking {
  export type EarnedDataStruct = { token: AddressLike; amount: BigNumberish };

  export type EarnedDataStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };
}

export interface CvxFxsRewardsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addReward"
      | "allowance"
      | "approve"
      | "approveRewardDistributor"
      | "balanceOf"
      | "claimableRewards"
      | "cvxfxs"
      | "decimals"
      | "decreaseAllowance"
      | "deposit(uint256,bool)"
      | "deposit(uint256)"
      | "fxs"
      | "fxsDepositor"
      | "getReward(address,address)"
      | "getReward(address)"
      | "getRewardForDuration"
      | "increaseAllowance"
      | "lastTimeRewardApplicable"
      | "name"
      | "notifyRewardAmount"
      | "recoverERC20"
      | "rewardData"
      | "rewardDistributors"
      | "rewardPerToken"
      | "rewardRedirect"
      | "rewardTokenLength"
      | "rewardTokens"
      | "rewards"
      | "rewardsDuration"
      | "setRewardRedirect"
      | "stake"
      | "stakeAll"
      | "stakeFor"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "userRewardPerTokenPaid"
      | "vefxsProxy"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Recovered"
      | "RewardAdded(address,uint256)"
      | "RewardAdded(address,address)"
      | "RewardDistributorApproved"
      | "RewardPaid"
      | "RewardRedirected"
      | "Staked"
      | "Transfer"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addReward",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRewardDistributor",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "cvxfxs", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,bool)",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fxs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fxsDepositor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReward(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardForDuration",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDistributors",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRedirect",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRedirect",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "stakeAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeFor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vefxsProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cvxfxs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fxs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fxsDepositor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReward(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReward(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRedirect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRedirect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vefxsProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveredEvent {
  export type InputTuple = [_token: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_token: string, _amount: bigint];
  export interface OutputObject {
    _token: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardAdded_address_uint256_Event {
  export type InputTuple = [_token: AddressLike, _reward: BigNumberish];
  export type OutputTuple = [_token: string, _reward: bigint];
  export interface OutputObject {
    _token: string;
    _reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardAdded_address_address_Event {
  export type InputTuple = [_reward: AddressLike, _distributor: AddressLike];
  export type OutputTuple = [_reward: string, _distributor: string];
  export interface OutputObject {
    _reward: string;
    _distributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardDistributorApprovedEvent {
  export type InputTuple = [_reward: AddressLike, _distributor: AddressLike];
  export type OutputTuple = [_reward: string, _distributor: string];
  export interface OutputObject {
    _reward: string;
    _distributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardPaidEvent {
  export type InputTuple = [
    _user: AddressLike,
    _rewardsToken: AddressLike,
    _reward: BigNumberish
  ];
  export type OutputTuple = [
    _user: string,
    _rewardsToken: string,
    _reward: bigint
  ];
  export interface OutputObject {
    _user: string;
    _rewardsToken: string;
    _reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardRedirectedEvent {
  export type InputTuple = [_account: AddressLike, _forward: AddressLike];
  export type OutputTuple = [_account: string, _forward: string];
  export interface OutputObject {
    _account: string;
    _forward: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [_user: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_user: string, _amount: bigint];
  export interface OutputObject {
    _user: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [_user: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_user: string, _amount: bigint];
  export interface OutputObject {
    _user: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CvxFxsRewards extends BaseContract {
  connect(runner?: ContractRunner | null): CvxFxsRewards;
  waitForDeployment(): Promise<this>;

  interface: CvxFxsRewardsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addReward: TypedContractMethod<
    [_rewardsToken: AddressLike, _distributor: AddressLike],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  approveRewardDistributor: TypedContractMethod<
    [_rewardsToken: AddressLike, _distributor: AddressLike, _approved: boolean],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  claimableRewards: TypedContractMethod<
    [_account: AddressLike],
    [CvxFxsStaking.EarnedDataStructOutput[]],
    "view"
  >;

  cvxfxs: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "deposit(uint256,bool)": TypedContractMethod<
    [_amount: BigNumberish, _lock: boolean],
    [void],
    "nonpayable"
  >;

  "deposit(uint256)": TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  fxs: TypedContractMethod<[], [string], "view">;

  fxsDepositor: TypedContractMethod<[], [string], "view">;

  "getReward(address,address)": TypedContractMethod<
    [_address: AddressLike, _forwardTo: AddressLike],
    [void],
    "nonpayable"
  >;

  "getReward(address)": TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  getRewardForDuration: TypedContractMethod<
    [_rewardsToken: AddressLike],
    [bigint],
    "view"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  lastTimeRewardApplicable: TypedContractMethod<
    [_rewardsToken: AddressLike],
    [bigint],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  notifyRewardAmount: TypedContractMethod<
    [_rewardsToken: AddressLike, _reward: BigNumberish],
    [void],
    "nonpayable"
  >;

  recoverERC20: TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  rewardData: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        periodFinish: bigint;
        rewardRate: bigint;
        lastUpdateTime: bigint;
        rewardPerTokenStored: bigint;
      }
    ],
    "view"
  >;

  rewardDistributors: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  rewardPerToken: TypedContractMethod<
    [_rewardsToken: AddressLike],
    [bigint],
    "view"
  >;

  rewardRedirect: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  rewardTokenLength: TypedContractMethod<[], [bigint], "view">;

  rewardTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  rewards: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  rewardsDuration: TypedContractMethod<[], [bigint], "view">;

  setRewardRedirect: TypedContractMethod<
    [_to: AddressLike],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  stakeAll: TypedContractMethod<[], [void], "nonpayable">;

  stakeFor: TypedContractMethod<
    [_for: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  userRewardPerTokenPaid: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  vefxsProxy: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addReward"
  ): TypedContractMethod<
    [_rewardsToken: AddressLike, _distributor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveRewardDistributor"
  ): TypedContractMethod<
    [_rewardsToken: AddressLike, _distributor: AddressLike, _approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimableRewards"
  ): TypedContractMethod<
    [_account: AddressLike],
    [CvxFxsStaking.EarnedDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "cvxfxs"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit(uint256,bool)"
  ): TypedContractMethod<
    [_amount: BigNumberish, _lock: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit(uint256)"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fxs"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fxsDepositor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getReward(address,address)"
  ): TypedContractMethod<
    [_address: AddressLike, _forwardTo: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getReward(address)"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRewardForDuration"
  ): TypedContractMethod<[_rewardsToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastTimeRewardApplicable"
  ): TypedContractMethod<[_rewardsToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "notifyRewardAmount"
  ): TypedContractMethod<
    [_rewardsToken: AddressLike, _reward: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recoverERC20"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardData"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        periodFinish: bigint;
        rewardRate: bigint;
        lastUpdateTime: bigint;
        rewardPerTokenStored: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardDistributors"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardPerToken"
  ): TypedContractMethod<[_rewardsToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardRedirect"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "rewardTokenLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardsDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setRewardRedirect"
  ): TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakeAll"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakeFor"
  ): TypedContractMethod<
    [_for: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userRewardPerTokenPaid"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "vefxsProxy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Recovered"
  ): TypedContractEvent<
    RecoveredEvent.InputTuple,
    RecoveredEvent.OutputTuple,
    RecoveredEvent.OutputObject
  >;
  getEvent(
    key: "RewardAdded(address,uint256)"
  ): TypedContractEvent<
    RewardAdded_address_uint256_Event.InputTuple,
    RewardAdded_address_uint256_Event.OutputTuple,
    RewardAdded_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "RewardAdded(address,address)"
  ): TypedContractEvent<
    RewardAdded_address_address_Event.InputTuple,
    RewardAdded_address_address_Event.OutputTuple,
    RewardAdded_address_address_Event.OutputObject
  >;
  getEvent(
    key: "RewardDistributorApproved"
  ): TypedContractEvent<
    RewardDistributorApprovedEvent.InputTuple,
    RewardDistributorApprovedEvent.OutputTuple,
    RewardDistributorApprovedEvent.OutputObject
  >;
  getEvent(
    key: "RewardPaid"
  ): TypedContractEvent<
    RewardPaidEvent.InputTuple,
    RewardPaidEvent.OutputTuple,
    RewardPaidEvent.OutputObject
  >;
  getEvent(
    key: "RewardRedirected"
  ): TypedContractEvent<
    RewardRedirectedEvent.InputTuple,
    RewardRedirectedEvent.OutputTuple,
    RewardRedirectedEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Recovered(address,uint256)": TypedContractEvent<
      RecoveredEvent.InputTuple,
      RecoveredEvent.OutputTuple,
      RecoveredEvent.OutputObject
    >;
    Recovered: TypedContractEvent<
      RecoveredEvent.InputTuple,
      RecoveredEvent.OutputTuple,
      RecoveredEvent.OutputObject
    >;

    "RewardAdded(address,uint256)": TypedContractEvent<
      RewardAdded_address_uint256_Event.InputTuple,
      RewardAdded_address_uint256_Event.OutputTuple,
      RewardAdded_address_uint256_Event.OutputObject
    >;
    "RewardAdded(address,address)": TypedContractEvent<
      RewardAdded_address_address_Event.InputTuple,
      RewardAdded_address_address_Event.OutputTuple,
      RewardAdded_address_address_Event.OutputObject
    >;

    "RewardDistributorApproved(address,address)": TypedContractEvent<
      RewardDistributorApprovedEvent.InputTuple,
      RewardDistributorApprovedEvent.OutputTuple,
      RewardDistributorApprovedEvent.OutputObject
    >;
    RewardDistributorApproved: TypedContractEvent<
      RewardDistributorApprovedEvent.InputTuple,
      RewardDistributorApprovedEvent.OutputTuple,
      RewardDistributorApprovedEvent.OutputObject
    >;

    "RewardPaid(address,address,uint256)": TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;
    RewardPaid: TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;

    "RewardRedirected(address,address)": TypedContractEvent<
      RewardRedirectedEvent.InputTuple,
      RewardRedirectedEvent.OutputTuple,
      RewardRedirectedEvent.OutputObject
    >;
    RewardRedirected: TypedContractEvent<
      RewardRedirectedEvent.InputTuple,
      RewardRedirectedEvent.OutputTuple,
      RewardRedirectedEvent.OutputObject
    >;

    "Staked(address,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Withdrawn(address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
