/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface GaugeFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deploy_gauge"
      | "implementation"
      | "get_gauge_count"
      | "get_gauge_by_idx"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewGauge"): EventFragment;

  encodeFunctionData(
    functionFragment: "deploy_gauge",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_gauge_count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_gauge_by_idx",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "deploy_gauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_gauge_count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_gauge_by_idx",
    data: BytesLike
  ): Result;
}

export namespace NewGaugeEvent {
  export type InputTuple = [
    _instance: AddressLike,
    _receiver: AddressLike,
    _max_emissions: BigNumberish
  ];
  export type OutputTuple = [
    _instance: string,
    _receiver: string,
    _max_emissions: bigint
  ];
  export interface OutputObject {
    _instance: string;
    _receiver: string;
    _max_emissions: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GaugeFactory extends BaseContract {
  connect(runner?: ContractRunner | null): GaugeFactory;
  waitForDeployment(): Promise<this>;

  interface: GaugeFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deploy_gauge: TypedContractMethod<
    [_receiver: AddressLike, _max_emissions: BigNumberish],
    [string],
    "nonpayable"
  >;

  implementation: TypedContractMethod<[], [string], "view">;

  get_gauge_count: TypedContractMethod<[], [bigint], "view">;

  get_gauge_by_idx: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deploy_gauge"
  ): TypedContractMethod<
    [_receiver: AddressLike, _max_emissions: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "get_gauge_count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "get_gauge_by_idx"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "NewGauge"
  ): TypedContractEvent<
    NewGaugeEvent.InputTuple,
    NewGaugeEvent.OutputTuple,
    NewGaugeEvent.OutputObject
  >;

  filters: {
    "NewGauge(address,address,uint256)": TypedContractEvent<
      NewGaugeEvent.InputTuple,
      NewGaugeEvent.OutputTuple,
      NewGaugeEvent.OutputObject
    >;
    NewGauge: TypedContractEvent<
      NewGaugeEvent.InputTuple,
      NewGaugeEvent.OutputTuple,
      NewGaugeEvent.OutputObject
    >;
  };
}
