/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PirexCvxConvex {
  export type ConvexRewardStruct = {
    token: AddressLike;
    amount: BigNumberish;
    balance: BigNumberish;
  };

  export type ConvexRewardStructOutput = [
    token: string,
    amount: bigint,
    balance: bigint
  ] & { token: string; amount: bigint; balance: bigint };
}

export declare namespace PirexCvx {
  export type EmergencyMigrationStruct = {
    recipient: AddressLike;
    tokens: AddressLike[];
  };

  export type EmergencyMigrationStructOutput = [
    recipient: string,
    tokens: string[]
  ] & { recipient: string; tokens: string[] };
}

export declare namespace IVotiumMultiMerkleStash {
  export type ClaimParamStruct = {
    token: AddressLike;
    index: BigNumberish;
    amount: BigNumberish;
    merkleProof: BytesLike[];
  };

  export type ClaimParamStructOutput = [
    token: string,
    index: bigint,
    amount: bigint,
    merkleProof: string[]
  ] & { token: string; index: bigint; amount: bigint; merkleProof: string[] };
}

export interface PirexCvxInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CVX"
      | "EPOCH_DURATION"
      | "FEE_DENOMINATOR"
      | "FEE_MAX"
      | "MAX_REDEMPTION_TIME"
      | "addDeveloper"
      | "claimMiscRewards"
      | "claimVotiumRewards"
      | "clearVoteDelegate"
      | "cvxDelegateRegistry"
      | "cvxLocker"
      | "delegationSpace"
      | "deposit"
      | "developers"
      | "emergencyExecutor"
      | "emergencyMigration"
      | "exchangeFutures"
      | "executeEmergencyMigration"
      | "fees"
      | "getCurrentEpoch"
      | "initializeEmergencyExecutor"
      | "initiateRedemptions"
      | "lock"
      | "outstandingRedemptions"
      | "owner"
      | "paused"
      | "pausedRelock"
      | "pendingLocks"
      | "pirexFees"
      | "pxCvx"
      | "redeem"
      | "redeemFuturesRewards"
      | "redeemLegacy"
      | "redeemSnapshotRewards"
      | "redemptions"
      | "removeDeveloper"
      | "renounceOwnership"
      | "rpxCvx"
      | "setContract"
      | "setConvexContract"
      | "setDelegationSpace"
      | "setEmergencyMigration"
      | "setFee"
      | "setPauseState"
      | "setUpxCvxDeprecated"
      | "setVoteDelegate"
      | "spxCvx"
      | "stake"
      | "transferOwnership"
      | "unionPirex"
      | "unlock"
      | "unstake"
      | "upxCvx"
      | "upxCvxDeprecated"
      | "votiumMultiMerkleStash"
      | "vpxCvx"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddDeveloper"
      | "ClaimMiscRewards"
      | "ClaimVotiumReward"
      | "ClearVoteDelegate"
      | "Deposit"
      | "ExchangeFutures"
      | "ExecuteEmergencyMigration"
      | "InitializeEmergencyExecutor"
      | "InitiateRedemptions"
      | "MintFutures"
      | "OwnershipTransferred"
      | "Paused"
      | "Redeem"
      | "RedeemFuturesRewards"
      | "RedeemSnapshotRewards"
      | "RemoveDeveloper"
      | "SetContract"
      | "SetConvexContract"
      | "SetDelegationSpace"
      | "SetEmergencyMigration"
      | "SetFee"
      | "SetUpxCvxDeprecated"
      | "SetVoteDelegate"
      | "Stake"
      | "Unpaused"
      | "Unstake"
  ): EventFragment;

  encodeFunctionData(functionFragment: "CVX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "EPOCH_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "FEE_MAX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_REDEMPTION_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDeveloper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMiscRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimVotiumRewards",
    values: [IVotiumMultiMerkleStash.ClaimParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "clearVoteDelegate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cvxDelegateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cvxLocker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegationSpace",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, AddressLike, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "developers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyExecutor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMigration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeFutures",
    values: [BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeEmergencyMigration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fees", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeEmergencyExecutor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateRedemptions",
    values: [BigNumberish[], BigNumberish, BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "lock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "outstandingRedemptions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pausedRelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingLocks",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pirexFees", values?: undefined): string;
  encodeFunctionData(functionFragment: "pxCvx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish[], BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFuturesRewards",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLegacy",
    values: [BigNumberish[], BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemSnapshotRewards",
    values: [BigNumberish, BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDeveloper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rpxCvx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setContract",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setConvexContract",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegationSpace",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyMigration",
    values: [PirexCvx.EmergencyMigrationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauseState",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpxCvxDeprecated",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoteDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "spxCvx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unionPirex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "upxCvx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upxCvxDeprecated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votiumMultiMerkleStash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vpxCvx", values?: undefined): string;

  decodeFunctionResult(functionFragment: "CVX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "EPOCH_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FEE_MAX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REDEMPTION_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDeveloper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMiscRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimVotiumRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearVoteDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cvxDelegateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cvxLocker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegationSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "developers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeFutures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeEmergencyMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeEmergencyExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateRedemptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "outstandingRedemptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausedRelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pirexFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pxCvx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemFuturesRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemLegacy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemSnapshotRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDeveloper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rpxCvx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConvexContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegationSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPauseState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpxCvxDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVoteDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spxCvx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unionPirex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upxCvx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upxCvxDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votiumMultiMerkleStash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vpxCvx", data: BytesLike): Result;
}

export namespace AddDeveloperEvent {
  export type InputTuple = [developer: AddressLike];
  export type OutputTuple = [developer: string];
  export interface OutputObject {
    developer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimMiscRewardsEvent {
  export type InputTuple = [
    timestamp: BigNumberish,
    rewards: PirexCvxConvex.ConvexRewardStruct[]
  ];
  export type OutputTuple = [
    timestamp: bigint,
    rewards: PirexCvxConvex.ConvexRewardStructOutput[]
  ];
  export interface OutputObject {
    timestamp: bigint;
    rewards: PirexCvxConvex.ConvexRewardStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimVotiumRewardEvent {
  export type InputTuple = [
    token: AddressLike,
    index: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, index: bigint, amount: bigint];
  export interface OutputObject {
    token: string;
    index: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClearVoteDelegateEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    assets: BigNumberish,
    receiver: AddressLike,
    shouldCompound: boolean,
    developer: AddressLike
  ];
  export type OutputTuple = [
    assets: bigint,
    receiver: string,
    shouldCompound: boolean,
    developer: string
  ];
  export interface OutputObject {
    assets: bigint;
    receiver: string;
    shouldCompound: boolean;
    developer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExchangeFuturesEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    amount: BigNumberish,
    receiver: AddressLike,
    f: BigNumberish
  ];
  export type OutputTuple = [
    epoch: bigint,
    amount: bigint,
    receiver: string,
    f: bigint
  ];
  export interface OutputObject {
    epoch: bigint;
    amount: bigint;
    receiver: string;
    f: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteEmergencyMigrationEvent {
  export type InputTuple = [recipient: AddressLike, tokens: AddressLike[]];
  export type OutputTuple = [recipient: string, tokens: string[]];
  export interface OutputObject {
    recipient: string;
    tokens: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializeEmergencyExecutorEvent {
  export type InputTuple = [_emergencyExecutor: AddressLike];
  export type OutputTuple = [_emergencyExecutor: string];
  export interface OutputObject {
    _emergencyExecutor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitiateRedemptionsEvent {
  export type InputTuple = [
    lockIndexes: BigNumberish[],
    f: BigNumberish,
    assets: BigNumberish[],
    receiver: AddressLike
  ];
  export type OutputTuple = [
    lockIndexes: bigint[],
    f: bigint,
    assets: bigint[],
    receiver: string
  ];
  export interface OutputObject {
    lockIndexes: bigint[];
    f: bigint;
    assets: bigint[];
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintFuturesEvent {
  export type InputTuple = [
    rounds: BigNumberish,
    f: BigNumberish,
    assets: BigNumberish,
    receiver: AddressLike
  ];
  export type OutputTuple = [
    rounds: bigint,
    f: bigint,
    assets: bigint,
    receiver: string
  ];
  export interface OutputObject {
    rounds: bigint;
    f: bigint;
    assets: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemEvent {
  export type InputTuple = [
    unlockTimes: BigNumberish[],
    assets: BigNumberish[],
    receiver: AddressLike,
    legacy: boolean
  ];
  export type OutputTuple = [
    unlockTimes: bigint[],
    assets: bigint[],
    receiver: string,
    legacy: boolean
  ];
  export interface OutputObject {
    unlockTimes: bigint[];
    assets: bigint[];
    receiver: string;
    legacy: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemFuturesRewardsEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    receiver: AddressLike,
    rewards: BytesLike[]
  ];
  export type OutputTuple = [
    epoch: bigint,
    receiver: string,
    rewards: string[]
  ];
  export interface OutputObject {
    epoch: bigint;
    receiver: string;
    rewards: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemSnapshotRewardsEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    rewardIndexes: BigNumberish[],
    receiver: AddressLike,
    snapshotBalance: BigNumberish,
    snapshotSupply: BigNumberish
  ];
  export type OutputTuple = [
    epoch: bigint,
    rewardIndexes: bigint[],
    receiver: string,
    snapshotBalance: bigint,
    snapshotSupply: bigint
  ];
  export interface OutputObject {
    epoch: bigint;
    rewardIndexes: bigint[];
    receiver: string;
    snapshotBalance: bigint;
    snapshotSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveDeveloperEvent {
  export type InputTuple = [developer: AddressLike];
  export type OutputTuple = [developer: string];
  export interface OutputObject {
    developer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetContractEvent {
  export type InputTuple = [c: BigNumberish, contractAddress: AddressLike];
  export type OutputTuple = [c: bigint, contractAddress: string];
  export interface OutputObject {
    c: bigint;
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetConvexContractEvent {
  export type InputTuple = [c: BigNumberish, contractAddress: AddressLike];
  export type OutputTuple = [c: bigint, contractAddress: string];
  export interface OutputObject {
    c: bigint;
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDelegationSpaceEvent {
  export type InputTuple = [_delegationSpace: string, shouldClear: boolean];
  export type OutputTuple = [_delegationSpace: string, shouldClear: boolean];
  export interface OutputObject {
    _delegationSpace: string;
    shouldClear: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetEmergencyMigrationEvent {
  export type InputTuple = [
    _emergencyMigration: PirexCvx.EmergencyMigrationStruct
  ];
  export type OutputTuple = [
    _emergencyMigration: PirexCvx.EmergencyMigrationStructOutput
  ];
  export interface OutputObject {
    _emergencyMigration: PirexCvx.EmergencyMigrationStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeEvent {
  export type InputTuple = [f: BigNumberish, fee: BigNumberish];
  export type OutputTuple = [f: bigint, fee: bigint];
  export interface OutputObject {
    f: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetUpxCvxDeprecatedEvent {
  export type InputTuple = [state: boolean];
  export type OutputTuple = [state: boolean];
  export interface OutputObject {
    state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetVoteDelegateEvent {
  export type InputTuple = [voteDelegate: AddressLike];
  export type OutputTuple = [voteDelegate: string];
  export interface OutputObject {
    voteDelegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeEvent {
  export type InputTuple = [
    rounds: BigNumberish,
    f: BigNumberish,
    assets: BigNumberish,
    receiver: AddressLike
  ];
  export type OutputTuple = [
    rounds: bigint,
    f: bigint,
    assets: bigint,
    receiver: string
  ];
  export interface OutputObject {
    rounds: bigint;
    f: bigint;
    assets: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakeEvent {
  export type InputTuple = [
    id: BigNumberish,
    assets: BigNumberish,
    receiver: AddressLike
  ];
  export type OutputTuple = [id: bigint, assets: bigint, receiver: string];
  export interface OutputObject {
    id: bigint;
    assets: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PirexCvx extends BaseContract {
  connect(runner?: ContractRunner | null): PirexCvx;
  waitForDeployment(): Promise<this>;

  interface: PirexCvxInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CVX: TypedContractMethod<[], [string], "view">;

  EPOCH_DURATION: TypedContractMethod<[], [bigint], "view">;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  FEE_MAX: TypedContractMethod<[], [bigint], "view">;

  MAX_REDEMPTION_TIME: TypedContractMethod<[], [bigint], "view">;

  addDeveloper: TypedContractMethod<
    [developer: AddressLike],
    [void],
    "nonpayable"
  >;

  claimMiscRewards: TypedContractMethod<[], [void], "nonpayable">;

  claimVotiumRewards: TypedContractMethod<
    [votiumRewards: IVotiumMultiMerkleStash.ClaimParamStruct[]],
    [void],
    "nonpayable"
  >;

  clearVoteDelegate: TypedContractMethod<[], [void], "nonpayable">;

  cvxDelegateRegistry: TypedContractMethod<[], [string], "view">;

  cvxLocker: TypedContractMethod<[], [string], "view">;

  delegationSpace: TypedContractMethod<[], [string], "view">;

  deposit: TypedContractMethod<
    [
      assets: BigNumberish,
      receiver: AddressLike,
      shouldCompound: boolean,
      developer: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  developers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  emergencyExecutor: TypedContractMethod<[], [string], "view">;

  emergencyMigration: TypedContractMethod<[], [string], "view">;

  exchangeFutures: TypedContractMethod<
    [
      epoch: BigNumberish,
      amount: BigNumberish,
      receiver: AddressLike,
      f: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  executeEmergencyMigration: TypedContractMethod<[], [void], "nonpayable">;

  fees: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getCurrentEpoch: TypedContractMethod<[], [bigint], "view">;

  initializeEmergencyExecutor: TypedContractMethod<
    [_emergencyExecutor: AddressLike],
    [void],
    "nonpayable"
  >;

  initiateRedemptions: TypedContractMethod<
    [
      lockIndexes: BigNumberish[],
      f: BigNumberish,
      assets: BigNumberish[],
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  lock: TypedContractMethod<[], [void], "nonpayable">;

  outstandingRedemptions: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pausedRelock: TypedContractMethod<[], [void], "nonpayable">;

  pendingLocks: TypedContractMethod<[], [bigint], "view">;

  pirexFees: TypedContractMethod<[], [string], "view">;

  pxCvx: TypedContractMethod<[], [string], "view">;

  redeem: TypedContractMethod<
    [
      unlockTimes: BigNumberish[],
      assets: BigNumberish[],
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  redeemFuturesRewards: TypedContractMethod<
    [epoch: BigNumberish, receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  redeemLegacy: TypedContractMethod<
    [
      unlockTimes: BigNumberish[],
      assets: BigNumberish[],
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  redeemSnapshotRewards: TypedContractMethod<
    [epoch: BigNumberish, rewardIndexes: BigNumberish[], receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  redemptions: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  removeDeveloper: TypedContractMethod<
    [developer: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rpxCvx: TypedContractMethod<[], [string], "view">;

  setContract: TypedContractMethod<
    [c: BigNumberish, contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setConvexContract: TypedContractMethod<
    [c: BigNumberish, contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setDelegationSpace: TypedContractMethod<
    [_delegationSpace: string, shouldClear: boolean],
    [void],
    "nonpayable"
  >;

  setEmergencyMigration: TypedContractMethod<
    [_emergencyMigration: PirexCvx.EmergencyMigrationStruct],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<
    [f: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPauseState: TypedContractMethod<[state: boolean], [void], "nonpayable">;

  setUpxCvxDeprecated: TypedContractMethod<
    [state: boolean],
    [void],
    "nonpayable"
  >;

  setVoteDelegate: TypedContractMethod<
    [voteDelegate: AddressLike],
    [void],
    "nonpayable"
  >;

  spxCvx: TypedContractMethod<[], [string], "view">;

  stake: TypedContractMethod<
    [
      rounds: BigNumberish,
      f: BigNumberish,
      assets: BigNumberish,
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unionPirex: TypedContractMethod<[], [string], "view">;

  unlock: TypedContractMethod<[], [void], "nonpayable">;

  unstake: TypedContractMethod<
    [id: BigNumberish, assets: BigNumberish, receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  upxCvx: TypedContractMethod<[], [string], "view">;

  upxCvxDeprecated: TypedContractMethod<[], [boolean], "view">;

  votiumMultiMerkleStash: TypedContractMethod<[], [string], "view">;

  vpxCvx: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CVX"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EPOCH_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FEE_MAX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_REDEMPTION_TIME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addDeveloper"
  ): TypedContractMethod<[developer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimMiscRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimVotiumRewards"
  ): TypedContractMethod<
    [votiumRewards: IVotiumMultiMerkleStash.ClaimParamStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "clearVoteDelegate"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cvxDelegateRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cvxLocker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "delegationSpace"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      assets: BigNumberish,
      receiver: AddressLike,
      shouldCompound: boolean,
      developer: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "developers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencyExecutor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyMigration"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "exchangeFutures"
  ): TypedContractMethod<
    [
      epoch: BigNumberish,
      amount: BigNumberish,
      receiver: AddressLike,
      f: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeEmergencyMigration"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fees"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initializeEmergencyExecutor"
  ): TypedContractMethod<
    [_emergencyExecutor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initiateRedemptions"
  ): TypedContractMethod<
    [
      lockIndexes: BigNumberish[],
      f: BigNumberish,
      assets: BigNumberish[],
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lock"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "outstandingRedemptions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pausedRelock"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pendingLocks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pirexFees"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pxCvx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [
      unlockTimes: BigNumberish[],
      assets: BigNumberish[],
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemFuturesRewards"
  ): TypedContractMethod<
    [epoch: BigNumberish, receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemLegacy"
  ): TypedContractMethod<
    [
      unlockTimes: BigNumberish[],
      assets: BigNumberish[],
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemSnapshotRewards"
  ): TypedContractMethod<
    [epoch: BigNumberish, rewardIndexes: BigNumberish[], receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redemptions"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeDeveloper"
  ): TypedContractMethod<[developer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rpxCvx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setContract"
  ): TypedContractMethod<
    [c: BigNumberish, contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setConvexContract"
  ): TypedContractMethod<
    [c: BigNumberish, contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDelegationSpace"
  ): TypedContractMethod<
    [_delegationSpace: string, shouldClear: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEmergencyMigration"
  ): TypedContractMethod<
    [_emergencyMigration: PirexCvx.EmergencyMigrationStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<
    [f: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPauseState"
  ): TypedContractMethod<[state: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUpxCvxDeprecated"
  ): TypedContractMethod<[state: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVoteDelegate"
  ): TypedContractMethod<[voteDelegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "spxCvx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [
      rounds: BigNumberish,
      f: BigNumberish,
      assets: BigNumberish,
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unionPirex"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unlock"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<
    [id: BigNumberish, assets: BigNumberish, receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upxCvx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "upxCvxDeprecated"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "votiumMultiMerkleStash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vpxCvx"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AddDeveloper"
  ): TypedContractEvent<
    AddDeveloperEvent.InputTuple,
    AddDeveloperEvent.OutputTuple,
    AddDeveloperEvent.OutputObject
  >;
  getEvent(
    key: "ClaimMiscRewards"
  ): TypedContractEvent<
    ClaimMiscRewardsEvent.InputTuple,
    ClaimMiscRewardsEvent.OutputTuple,
    ClaimMiscRewardsEvent.OutputObject
  >;
  getEvent(
    key: "ClaimVotiumReward"
  ): TypedContractEvent<
    ClaimVotiumRewardEvent.InputTuple,
    ClaimVotiumRewardEvent.OutputTuple,
    ClaimVotiumRewardEvent.OutputObject
  >;
  getEvent(
    key: "ClearVoteDelegate"
  ): TypedContractEvent<
    ClearVoteDelegateEvent.InputTuple,
    ClearVoteDelegateEvent.OutputTuple,
    ClearVoteDelegateEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "ExchangeFutures"
  ): TypedContractEvent<
    ExchangeFuturesEvent.InputTuple,
    ExchangeFuturesEvent.OutputTuple,
    ExchangeFuturesEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteEmergencyMigration"
  ): TypedContractEvent<
    ExecuteEmergencyMigrationEvent.InputTuple,
    ExecuteEmergencyMigrationEvent.OutputTuple,
    ExecuteEmergencyMigrationEvent.OutputObject
  >;
  getEvent(
    key: "InitializeEmergencyExecutor"
  ): TypedContractEvent<
    InitializeEmergencyExecutorEvent.InputTuple,
    InitializeEmergencyExecutorEvent.OutputTuple,
    InitializeEmergencyExecutorEvent.OutputObject
  >;
  getEvent(
    key: "InitiateRedemptions"
  ): TypedContractEvent<
    InitiateRedemptionsEvent.InputTuple,
    InitiateRedemptionsEvent.OutputTuple,
    InitiateRedemptionsEvent.OutputObject
  >;
  getEvent(
    key: "MintFutures"
  ): TypedContractEvent<
    MintFuturesEvent.InputTuple,
    MintFuturesEvent.OutputTuple,
    MintFuturesEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Redeem"
  ): TypedContractEvent<
    RedeemEvent.InputTuple,
    RedeemEvent.OutputTuple,
    RedeemEvent.OutputObject
  >;
  getEvent(
    key: "RedeemFuturesRewards"
  ): TypedContractEvent<
    RedeemFuturesRewardsEvent.InputTuple,
    RedeemFuturesRewardsEvent.OutputTuple,
    RedeemFuturesRewardsEvent.OutputObject
  >;
  getEvent(
    key: "RedeemSnapshotRewards"
  ): TypedContractEvent<
    RedeemSnapshotRewardsEvent.InputTuple,
    RedeemSnapshotRewardsEvent.OutputTuple,
    RedeemSnapshotRewardsEvent.OutputObject
  >;
  getEvent(
    key: "RemoveDeveloper"
  ): TypedContractEvent<
    RemoveDeveloperEvent.InputTuple,
    RemoveDeveloperEvent.OutputTuple,
    RemoveDeveloperEvent.OutputObject
  >;
  getEvent(
    key: "SetContract"
  ): TypedContractEvent<
    SetContractEvent.InputTuple,
    SetContractEvent.OutputTuple,
    SetContractEvent.OutputObject
  >;
  getEvent(
    key: "SetConvexContract"
  ): TypedContractEvent<
    SetConvexContractEvent.InputTuple,
    SetConvexContractEvent.OutputTuple,
    SetConvexContractEvent.OutputObject
  >;
  getEvent(
    key: "SetDelegationSpace"
  ): TypedContractEvent<
    SetDelegationSpaceEvent.InputTuple,
    SetDelegationSpaceEvent.OutputTuple,
    SetDelegationSpaceEvent.OutputObject
  >;
  getEvent(
    key: "SetEmergencyMigration"
  ): TypedContractEvent<
    SetEmergencyMigrationEvent.InputTuple,
    SetEmergencyMigrationEvent.OutputTuple,
    SetEmergencyMigrationEvent.OutputObject
  >;
  getEvent(
    key: "SetFee"
  ): TypedContractEvent<
    SetFeeEvent.InputTuple,
    SetFeeEvent.OutputTuple,
    SetFeeEvent.OutputObject
  >;
  getEvent(
    key: "SetUpxCvxDeprecated"
  ): TypedContractEvent<
    SetUpxCvxDeprecatedEvent.InputTuple,
    SetUpxCvxDeprecatedEvent.OutputTuple,
    SetUpxCvxDeprecatedEvent.OutputObject
  >;
  getEvent(
    key: "SetVoteDelegate"
  ): TypedContractEvent<
    SetVoteDelegateEvent.InputTuple,
    SetVoteDelegateEvent.OutputTuple,
    SetVoteDelegateEvent.OutputObject
  >;
  getEvent(
    key: "Stake"
  ): TypedContractEvent<
    StakeEvent.InputTuple,
    StakeEvent.OutputTuple,
    StakeEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Unstake"
  ): TypedContractEvent<
    UnstakeEvent.InputTuple,
    UnstakeEvent.OutputTuple,
    UnstakeEvent.OutputObject
  >;

  filters: {
    "AddDeveloper(address)": TypedContractEvent<
      AddDeveloperEvent.InputTuple,
      AddDeveloperEvent.OutputTuple,
      AddDeveloperEvent.OutputObject
    >;
    AddDeveloper: TypedContractEvent<
      AddDeveloperEvent.InputTuple,
      AddDeveloperEvent.OutputTuple,
      AddDeveloperEvent.OutputObject
    >;

    "ClaimMiscRewards(uint256,tuple[])": TypedContractEvent<
      ClaimMiscRewardsEvent.InputTuple,
      ClaimMiscRewardsEvent.OutputTuple,
      ClaimMiscRewardsEvent.OutputObject
    >;
    ClaimMiscRewards: TypedContractEvent<
      ClaimMiscRewardsEvent.InputTuple,
      ClaimMiscRewardsEvent.OutputTuple,
      ClaimMiscRewardsEvent.OutputObject
    >;

    "ClaimVotiumReward(address,uint256,uint256)": TypedContractEvent<
      ClaimVotiumRewardEvent.InputTuple,
      ClaimVotiumRewardEvent.OutputTuple,
      ClaimVotiumRewardEvent.OutputObject
    >;
    ClaimVotiumReward: TypedContractEvent<
      ClaimVotiumRewardEvent.InputTuple,
      ClaimVotiumRewardEvent.OutputTuple,
      ClaimVotiumRewardEvent.OutputObject
    >;

    "ClearVoteDelegate()": TypedContractEvent<
      ClearVoteDelegateEvent.InputTuple,
      ClearVoteDelegateEvent.OutputTuple,
      ClearVoteDelegateEvent.OutputObject
    >;
    ClearVoteDelegate: TypedContractEvent<
      ClearVoteDelegateEvent.InputTuple,
      ClearVoteDelegateEvent.OutputTuple,
      ClearVoteDelegateEvent.OutputObject
    >;

    "Deposit(uint256,address,bool,address)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "ExchangeFutures(uint256,uint256,address,uint8)": TypedContractEvent<
      ExchangeFuturesEvent.InputTuple,
      ExchangeFuturesEvent.OutputTuple,
      ExchangeFuturesEvent.OutputObject
    >;
    ExchangeFutures: TypedContractEvent<
      ExchangeFuturesEvent.InputTuple,
      ExchangeFuturesEvent.OutputTuple,
      ExchangeFuturesEvent.OutputObject
    >;

    "ExecuteEmergencyMigration(address,address[])": TypedContractEvent<
      ExecuteEmergencyMigrationEvent.InputTuple,
      ExecuteEmergencyMigrationEvent.OutputTuple,
      ExecuteEmergencyMigrationEvent.OutputObject
    >;
    ExecuteEmergencyMigration: TypedContractEvent<
      ExecuteEmergencyMigrationEvent.InputTuple,
      ExecuteEmergencyMigrationEvent.OutputTuple,
      ExecuteEmergencyMigrationEvent.OutputObject
    >;

    "InitializeEmergencyExecutor(address)": TypedContractEvent<
      InitializeEmergencyExecutorEvent.InputTuple,
      InitializeEmergencyExecutorEvent.OutputTuple,
      InitializeEmergencyExecutorEvent.OutputObject
    >;
    InitializeEmergencyExecutor: TypedContractEvent<
      InitializeEmergencyExecutorEvent.InputTuple,
      InitializeEmergencyExecutorEvent.OutputTuple,
      InitializeEmergencyExecutorEvent.OutputObject
    >;

    "InitiateRedemptions(uint256[],uint8,uint256[],address)": TypedContractEvent<
      InitiateRedemptionsEvent.InputTuple,
      InitiateRedemptionsEvent.OutputTuple,
      InitiateRedemptionsEvent.OutputObject
    >;
    InitiateRedemptions: TypedContractEvent<
      InitiateRedemptionsEvent.InputTuple,
      InitiateRedemptionsEvent.OutputTuple,
      InitiateRedemptionsEvent.OutputObject
    >;

    "MintFutures(uint256,uint8,uint256,address)": TypedContractEvent<
      MintFuturesEvent.InputTuple,
      MintFuturesEvent.OutputTuple,
      MintFuturesEvent.OutputObject
    >;
    MintFutures: TypedContractEvent<
      MintFuturesEvent.InputTuple,
      MintFuturesEvent.OutputTuple,
      MintFuturesEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Redeem(uint256[],uint256[],address,bool)": TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;
    Redeem: TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;

    "RedeemFuturesRewards(uint256,address,bytes32[])": TypedContractEvent<
      RedeemFuturesRewardsEvent.InputTuple,
      RedeemFuturesRewardsEvent.OutputTuple,
      RedeemFuturesRewardsEvent.OutputObject
    >;
    RedeemFuturesRewards: TypedContractEvent<
      RedeemFuturesRewardsEvent.InputTuple,
      RedeemFuturesRewardsEvent.OutputTuple,
      RedeemFuturesRewardsEvent.OutputObject
    >;

    "RedeemSnapshotRewards(uint256,uint256[],address,uint256,uint256)": TypedContractEvent<
      RedeemSnapshotRewardsEvent.InputTuple,
      RedeemSnapshotRewardsEvent.OutputTuple,
      RedeemSnapshotRewardsEvent.OutputObject
    >;
    RedeemSnapshotRewards: TypedContractEvent<
      RedeemSnapshotRewardsEvent.InputTuple,
      RedeemSnapshotRewardsEvent.OutputTuple,
      RedeemSnapshotRewardsEvent.OutputObject
    >;

    "RemoveDeveloper(address)": TypedContractEvent<
      RemoveDeveloperEvent.InputTuple,
      RemoveDeveloperEvent.OutputTuple,
      RemoveDeveloperEvent.OutputObject
    >;
    RemoveDeveloper: TypedContractEvent<
      RemoveDeveloperEvent.InputTuple,
      RemoveDeveloperEvent.OutputTuple,
      RemoveDeveloperEvent.OutputObject
    >;

    "SetContract(uint8,address)": TypedContractEvent<
      SetContractEvent.InputTuple,
      SetContractEvent.OutputTuple,
      SetContractEvent.OutputObject
    >;
    SetContract: TypedContractEvent<
      SetContractEvent.InputTuple,
      SetContractEvent.OutputTuple,
      SetContractEvent.OutputObject
    >;

    "SetConvexContract(uint8,address)": TypedContractEvent<
      SetConvexContractEvent.InputTuple,
      SetConvexContractEvent.OutputTuple,
      SetConvexContractEvent.OutputObject
    >;
    SetConvexContract: TypedContractEvent<
      SetConvexContractEvent.InputTuple,
      SetConvexContractEvent.OutputTuple,
      SetConvexContractEvent.OutputObject
    >;

    "SetDelegationSpace(string,bool)": TypedContractEvent<
      SetDelegationSpaceEvent.InputTuple,
      SetDelegationSpaceEvent.OutputTuple,
      SetDelegationSpaceEvent.OutputObject
    >;
    SetDelegationSpace: TypedContractEvent<
      SetDelegationSpaceEvent.InputTuple,
      SetDelegationSpaceEvent.OutputTuple,
      SetDelegationSpaceEvent.OutputObject
    >;

    "SetEmergencyMigration(tuple)": TypedContractEvent<
      SetEmergencyMigrationEvent.InputTuple,
      SetEmergencyMigrationEvent.OutputTuple,
      SetEmergencyMigrationEvent.OutputObject
    >;
    SetEmergencyMigration: TypedContractEvent<
      SetEmergencyMigrationEvent.InputTuple,
      SetEmergencyMigrationEvent.OutputTuple,
      SetEmergencyMigrationEvent.OutputObject
    >;

    "SetFee(uint8,uint32)": TypedContractEvent<
      SetFeeEvent.InputTuple,
      SetFeeEvent.OutputTuple,
      SetFeeEvent.OutputObject
    >;
    SetFee: TypedContractEvent<
      SetFeeEvent.InputTuple,
      SetFeeEvent.OutputTuple,
      SetFeeEvent.OutputObject
    >;

    "SetUpxCvxDeprecated(bool)": TypedContractEvent<
      SetUpxCvxDeprecatedEvent.InputTuple,
      SetUpxCvxDeprecatedEvent.OutputTuple,
      SetUpxCvxDeprecatedEvent.OutputObject
    >;
    SetUpxCvxDeprecated: TypedContractEvent<
      SetUpxCvxDeprecatedEvent.InputTuple,
      SetUpxCvxDeprecatedEvent.OutputTuple,
      SetUpxCvxDeprecatedEvent.OutputObject
    >;

    "SetVoteDelegate(address)": TypedContractEvent<
      SetVoteDelegateEvent.InputTuple,
      SetVoteDelegateEvent.OutputTuple,
      SetVoteDelegateEvent.OutputObject
    >;
    SetVoteDelegate: TypedContractEvent<
      SetVoteDelegateEvent.InputTuple,
      SetVoteDelegateEvent.OutputTuple,
      SetVoteDelegateEvent.OutputObject
    >;

    "Stake(uint256,uint8,uint256,address)": TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;
    Stake: TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Unstake(uint256,uint256,address)": TypedContractEvent<
      UnstakeEvent.InputTuple,
      UnstakeEvent.OutputTuple,
      UnstakeEvent.OutputObject
    >;
    Unstake: TypedContractEvent<
      UnstakeEvent.InputTuple,
      UnstakeEvent.OutputTuple,
      UnstakeEvent.OutputObject
    >;
  };
}
