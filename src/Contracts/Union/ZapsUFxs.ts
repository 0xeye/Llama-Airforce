/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ZapsUFxsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CRVETH_CRV_INDEX"
      | "CRVETH_ETH_INDEX"
      | "CRV_TOKEN"
      | "CURVE_CRV_ETH_POOL"
      | "CURVE_CVXFXS_FXS_LP_TOKEN"
      | "CURVE_CVXFXS_FXS_POOL"
      | "CURVE_CVX_ETH_POOL"
      | "CURVE_FRAX_USDC_POOL"
      | "CURVE_FXS_ETH_POOL"
      | "CVXETH_CVX_INDEX"
      | "CVXETH_ETH_INDEX"
      | "CVXFXS_TOKEN"
      | "CVX_TOKEN"
      | "FRAX_TOKEN"
      | "FXS_DEPOSIT"
      | "FXS_TOKEN"
      | "UNISWAP_ROUTER"
      | "UNIV3_ROUTER"
      | "USDC_TOKEN"
      | "USDT_TOKEN"
      | "WETH_TOKEN"
      | "_claimAsEth"
      | "claimFromVaultAsCvx"
      | "claimFromVaultAsEth"
      | "claimFromVaultAsFxs"
      | "claimFromVaultAsUsdt"
      | "claimFromVaultViaUniV2EthPair"
      | "depositFromEth"
      | "depositFromFxs"
      | "depositFromUFxs"
      | "depositViaUniV2EthPair"
      | "owner"
      | "renounceOwnership"
      | "setApprovals"
      | "setSwapOption"
      | "swapOption"
      | "transferOwnership"
      | "vault"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OptionChanged" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CRVETH_CRV_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRVETH_ETH_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CRV_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CURVE_CRV_ETH_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CURVE_CVXFXS_FXS_LP_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CURVE_CVXFXS_FXS_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CURVE_CVX_ETH_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CURVE_FRAX_USDC_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CURVE_FXS_ETH_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXETH_CVX_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXETH_ETH_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXFXS_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CVX_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "FRAX_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FXS_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "FXS_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UNISWAP_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNIV3_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDC_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDT_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WETH_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_claimAsEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromVaultAsCvx",
    values: [BigNumberish, BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromVaultAsEth",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromVaultAsFxs",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromVaultAsUsdt",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromVaultViaUniV2EthPair",
    values: [BigNumberish, BigNumberish, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFromEth",
    values: [BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFromFxs",
    values: [BigNumberish, BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFromUFxs",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositViaUniV2EthPair",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapOption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CRVETH_CRV_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CRVETH_ETH_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CRV_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CURVE_CRV_ETH_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CURVE_CVXFXS_FXS_LP_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CURVE_CVXFXS_FXS_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CURVE_CVX_ETH_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CURVE_FRAX_USDC_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CURVE_FXS_ETH_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXETH_CVX_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXETH_ETH_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXFXS_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CVX_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FRAX_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FXS_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FXS_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UNISWAP_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNIV3_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDC_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDT_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_claimAsEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromVaultAsCvx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromVaultAsEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromVaultAsFxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromVaultAsUsdt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromVaultViaUniV2EthPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFromEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFromFxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFromUFxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositViaUniV2EthPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapOption", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
}

export namespace OptionChangedEvent {
  export type InputTuple = [oldOption: BigNumberish, newOption: BigNumberish];
  export type OutputTuple = [oldOption: bigint, newOption: bigint];
  export interface OutputObject {
    oldOption: bigint;
    newOption: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZapsUFxs extends BaseContract {
  connect(runner?: ContractRunner | null): ZapsUFxs;
  waitForDeployment(): Promise<this>;

  interface: ZapsUFxsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CRVETH_CRV_INDEX: TypedContractMethod<[], [bigint], "view">;

  CRVETH_ETH_INDEX: TypedContractMethod<[], [bigint], "view">;

  CRV_TOKEN: TypedContractMethod<[], [string], "view">;

  CURVE_CRV_ETH_POOL: TypedContractMethod<[], [string], "view">;

  CURVE_CVXFXS_FXS_LP_TOKEN: TypedContractMethod<[], [string], "view">;

  CURVE_CVXFXS_FXS_POOL: TypedContractMethod<[], [string], "view">;

  CURVE_CVX_ETH_POOL: TypedContractMethod<[], [string], "view">;

  CURVE_FRAX_USDC_POOL: TypedContractMethod<[], [string], "view">;

  CURVE_FXS_ETH_POOL: TypedContractMethod<[], [string], "view">;

  CVXETH_CVX_INDEX: TypedContractMethod<[], [bigint], "view">;

  CVXETH_ETH_INDEX: TypedContractMethod<[], [bigint], "view">;

  CVXFXS_TOKEN: TypedContractMethod<[], [string], "view">;

  CVX_TOKEN: TypedContractMethod<[], [string], "view">;

  FRAX_TOKEN: TypedContractMethod<[], [string], "view">;

  FXS_DEPOSIT: TypedContractMethod<[], [string], "view">;

  FXS_TOKEN: TypedContractMethod<[], [string], "view">;

  UNISWAP_ROUTER: TypedContractMethod<[], [string], "view">;

  UNIV3_ROUTER: TypedContractMethod<[], [string], "view">;

  USDC_TOKEN: TypedContractMethod<[], [string], "view">;

  USDT_TOKEN: TypedContractMethod<[], [string], "view">;

  WETH_TOKEN: TypedContractMethod<[], [string], "view">;

  _claimAsEth: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  claimFromVaultAsCvx: TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      to: AddressLike,
      lock: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  claimFromVaultAsEth: TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  claimFromVaultAsFxs: TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  claimFromVaultAsUsdt: TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  claimFromVaultViaUniV2EthPair: TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      router: AddressLike,
      outputToken: AddressLike,
      to: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  depositFromEth: TypedContractMethod<
    [minAmountOut: BigNumberish, to: AddressLike, lock: boolean],
    [void],
    "payable"
  >;

  depositFromFxs: TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      to: AddressLike,
      lock: boolean
    ],
    [void],
    "nonpayable"
  >;

  depositFromUFxs: TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  depositViaUniV2EthPair: TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      router: AddressLike,
      inputToken: AddressLike,
      to: AddressLike,
      lock: boolean
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setApprovals: TypedContractMethod<[], [void], "nonpayable">;

  setSwapOption: TypedContractMethod<
    [_newOption: BigNumberish],
    [void],
    "nonpayable"
  >;

  swapOption: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vault: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CRVETH_CRV_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CRVETH_ETH_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CRV_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CURVE_CRV_ETH_POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CURVE_CVXFXS_FXS_LP_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CURVE_CVXFXS_FXS_POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CURVE_CVX_ETH_POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CURVE_FRAX_USDC_POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CURVE_FXS_ETH_POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CVXETH_CVX_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CVXETH_ETH_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CVXFXS_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CVX_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FRAX_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FXS_DEPOSIT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FXS_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UNISWAP_ROUTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UNIV3_ROUTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "USDC_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "USDT_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WETH_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_claimAsEth"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "claimFromVaultAsCvx"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      to: AddressLike,
      lock: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFromVaultAsEth"
  ): TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFromVaultAsFxs"
  ): TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFromVaultAsUsdt"
  ): TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFromVaultViaUniV2EthPair"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      router: AddressLike,
      outputToken: AddressLike,
      to: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositFromEth"
  ): TypedContractMethod<
    [minAmountOut: BigNumberish, to: AddressLike, lock: boolean],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositFromFxs"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      to: AddressLike,
      lock: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositFromUFxs"
  ): TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositViaUniV2EthPair"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      router: AddressLike,
      inputToken: AddressLike,
      to: AddressLike,
      lock: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setApprovals"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSwapOption"
  ): TypedContractMethod<[_newOption: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapOption"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OptionChanged"
  ): TypedContractEvent<
    OptionChangedEvent.InputTuple,
    OptionChangedEvent.OutputTuple,
    OptionChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OptionChanged(uint8,uint8)": TypedContractEvent<
      OptionChangedEvent.InputTuple,
      OptionChangedEvent.OutputTuple,
      OptionChangedEvent.OutputObject
    >;
    OptionChanged: TypedContractEvent<
      OptionChangedEvent.InputTuple,
      OptionChangedEvent.OutputTuple,
      OptionChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
