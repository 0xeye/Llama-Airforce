/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ZapsUCvxInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CRVETH_CRV_INDEX"
      | "CRVETH_ETH_INDEX"
      | "CRV_TOKEN"
      | "CURVE_CRV_ETH_POOL"
      | "CURVE_CVXCRV_CRV_POOL"
      | "CURVE_CVX_ETH_POOL"
      | "CVXCRV_CRV_INDEX"
      | "CVXCRV_CVXCRV_INDEX"
      | "CVXCRV_STAKING_CONTRACT"
      | "CVXCRV_TOKEN"
      | "CVXETH_CVX_INDEX"
      | "CVXETH_ETH_INDEX"
      | "CVX_TOKEN"
      | "_claimAsEth"
      | "claimFromVaultAsCrv"
      | "claimFromVaultAsCvx"
      | "claimFromVaultAsCvxCrv"
      | "claimFromVaultAsEth"
      | "claimFromVaultAsUsdt"
      | "claimFromVaultViaUniV2EthPair"
      | "depositFromCrv"
      | "depositFromCvx"
      | "depositFromCvxCrv"
      | "depositFromEth"
      | "depositViaUniV2EthPair"
      | "setApprovals"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CRVETH_CRV_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRVETH_ETH_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CRV_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CURVE_CRV_ETH_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CURVE_CVXCRV_CRV_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CURVE_CVX_ETH_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXCRV_CRV_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXCRV_CVXCRV_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXCRV_STAKING_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXCRV_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXETH_CVX_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXETH_ETH_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CVX_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_claimAsEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromVaultAsCrv",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromVaultAsCvx",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromVaultAsCvxCrv",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromVaultAsEth",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromVaultAsUsdt",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromVaultViaUniV2EthPair",
    values: [BigNumberish, BigNumberish, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFromCrv",
    values: [BigNumberish, BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFromCvx",
    values: [BigNumberish, BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFromCvxCrv",
    values: [BigNumberish, BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFromEth",
    values: [BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositViaUniV2EthPair",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovals",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CRVETH_CRV_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CRVETH_ETH_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CRV_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CURVE_CRV_ETH_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CURVE_CVXCRV_CRV_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CURVE_CVX_ETH_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXCRV_CRV_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXCRV_CVXCRV_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXCRV_STAKING_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXCRV_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXETH_CVX_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXETH_ETH_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CVX_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_claimAsEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromVaultAsCrv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromVaultAsCvx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromVaultAsCvxCrv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromVaultAsEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromVaultAsUsdt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromVaultViaUniV2EthPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFromCrv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFromCvx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFromCvxCrv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFromEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositViaUniV2EthPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovals",
    data: BytesLike
  ): Result;
}

export interface ZapsUCvx extends BaseContract {
  connect(runner?: ContractRunner | null): ZapsUCvx;
  waitForDeployment(): Promise<this>;

  interface: ZapsUCvxInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CRVETH_CRV_INDEX: TypedContractMethod<[], [bigint], "view">;

  CRVETH_ETH_INDEX: TypedContractMethod<[], [bigint], "view">;

  CRV_TOKEN: TypedContractMethod<[], [string], "view">;

  CURVE_CRV_ETH_POOL: TypedContractMethod<[], [string], "view">;

  CURVE_CVXCRV_CRV_POOL: TypedContractMethod<[], [string], "view">;

  CURVE_CVX_ETH_POOL: TypedContractMethod<[], [string], "view">;

  CVXCRV_CRV_INDEX: TypedContractMethod<[], [bigint], "view">;

  CVXCRV_CVXCRV_INDEX: TypedContractMethod<[], [bigint], "view">;

  CVXCRV_STAKING_CONTRACT: TypedContractMethod<[], [string], "view">;

  CVXCRV_TOKEN: TypedContractMethod<[], [string], "view">;

  CVXETH_CVX_INDEX: TypedContractMethod<[], [bigint], "view">;

  CVXETH_ETH_INDEX: TypedContractMethod<[], [bigint], "view">;

  CVX_TOKEN: TypedContractMethod<[], [string], "view">;

  _claimAsEth: TypedContractMethod<
    [_amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  claimFromVaultAsCrv: TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  claimFromVaultAsCvx: TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  claimFromVaultAsCvxCrv: TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  claimFromVaultAsEth: TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  claimFromVaultAsUsdt: TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  claimFromVaultViaUniV2EthPair: TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      router: AddressLike,
      outputToken: AddressLike,
      to: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  depositFromCrv: TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      to: AddressLike,
      lock: boolean
    ],
    [void],
    "nonpayable"
  >;

  depositFromCvx: TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      to: AddressLike,
      lock: boolean
    ],
    [void],
    "nonpayable"
  >;

  depositFromCvxCrv: TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      to: AddressLike,
      lock: boolean
    ],
    [void],
    "nonpayable"
  >;

  depositFromEth: TypedContractMethod<
    [minAmountOut: BigNumberish, to: AddressLike, lock: boolean],
    [void],
    "payable"
  >;

  depositViaUniV2EthPair: TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      router: AddressLike,
      inputToken: AddressLike,
      to: AddressLike,
      lock: boolean
    ],
    [void],
    "nonpayable"
  >;

  setApprovals: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CRVETH_CRV_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CRVETH_ETH_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CRV_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CURVE_CRV_ETH_POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CURVE_CVXCRV_CRV_POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CURVE_CVX_ETH_POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CVXCRV_CRV_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CVXCRV_CVXCRV_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CVXCRV_STAKING_CONTRACT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CVXCRV_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CVXETH_CVX_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CVXETH_ETH_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CVX_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_claimAsEth"
  ): TypedContractMethod<[_amount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "claimFromVaultAsCrv"
  ): TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFromVaultAsCvx"
  ): TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFromVaultAsCvxCrv"
  ): TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFromVaultAsEth"
  ): TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFromVaultAsUsdt"
  ): TypedContractMethod<
    [amount: BigNumberish, minAmountOut: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFromVaultViaUniV2EthPair"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      router: AddressLike,
      outputToken: AddressLike,
      to: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositFromCrv"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      to: AddressLike,
      lock: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositFromCvx"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      to: AddressLike,
      lock: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositFromCvxCrv"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      to: AddressLike,
      lock: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositFromEth"
  ): TypedContractMethod<
    [minAmountOut: BigNumberish, to: AddressLike, lock: boolean],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositViaUniV2EthPair"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      minAmountOut: BigNumberish,
      router: AddressLike,
      inputToken: AddressLike,
      to: AddressLike,
      lock: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovals"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
