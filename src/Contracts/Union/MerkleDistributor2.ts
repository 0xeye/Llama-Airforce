/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MerkleDistributor2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "CRVETH_CRV_INDEX"
      | "CRVETH_ETH_INDEX"
      | "CRV_TOKEN"
      | "CURVE_CRV_ETH_POOL"
      | "CURVE_CVXCRV_CRV_POOL"
      | "CURVE_CVX_ETH_POOL"
      | "CVXCRV_CRV_INDEX"
      | "CVXCRV_CVXCRV_INDEX"
      | "CVXCRV_STAKING_CONTRACT"
      | "CVXCRV_TOKEN"
      | "CVXETH_CVX_INDEX"
      | "CVXETH_ETH_INDEX"
      | "CVX_TOKEN"
      | "admin"
      | "claim"
      | "claimAs(uint256,address,uint256,bytes32[],uint8)"
      | "claimAs(uint256,address,uint256,bytes32[],uint8,uint256)"
      | "depositor"
      | "freeze"
      | "frozen"
      | "isClaimed"
      | "merkleRoot"
      | "setApprovals"
      | "stake"
      | "unfreeze"
      | "updateAdmin"
      | "updateDepositor"
      | "updateMerkleRoot"
      | "updateVault"
      | "vault"
      | "week"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminUpdated"
      | "Claimed"
      | "DepositorUpdated"
      | "MerkleRootUpdated"
      | "VaultUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CRVETH_CRV_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRVETH_ETH_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CRV_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CURVE_CRV_ETH_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CURVE_CVXCRV_CRV_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CURVE_CVX_ETH_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXCRV_CRV_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXCRV_CVXCRV_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXCRV_STAKING_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXCRV_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXETH_CVX_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXETH_ETH_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CVX_TOKEN", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAs(uint256,address,uint256,bytes32[],uint8)",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAs(uint256,address,uint256,bytes32[],uint8,uint256)",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "depositor", values?: undefined): string;
  encodeFunctionData(functionFragment: "freeze", values?: undefined): string;
  encodeFunctionData(functionFragment: "frozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(functionFragment: "unfreeze", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDepositor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMerkleRoot",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "week", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CRVETH_CRV_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CRVETH_ETH_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CRV_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CURVE_CRV_ETH_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CURVE_CVXCRV_CRV_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CURVE_CVX_ETH_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXCRV_CRV_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXCRV_CVXCRV_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXCRV_STAKING_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXCRV_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXETH_CVX_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXETH_ETH_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CVX_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAs(uint256,address,uint256,bytes32[],uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAs(uint256,address,uint256,bytes32[],uint8,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freeze", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unfreeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDepositor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "week", data: BytesLike): Result;
}

export namespace AdminUpdatedEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    index: BigNumberish,
    amount: BigNumberish,
    account: AddressLike,
    week: BigNumberish
  ];
  export type OutputTuple = [
    index: bigint,
    amount: bigint,
    account: string,
    week: bigint
  ];
  export interface OutputObject {
    index: bigint;
    amount: bigint;
    account: string;
    week: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositorUpdatedEvent {
  export type InputTuple = [
    oldDepositor: AddressLike,
    newDepositor: AddressLike
  ];
  export type OutputTuple = [oldDepositor: string, newDepositor: string];
  export interface OutputObject {
    oldDepositor: string;
    newDepositor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MerkleRootUpdatedEvent {
  export type InputTuple = [merkleRoot: BytesLike, week: BigNumberish];
  export type OutputTuple = [merkleRoot: string, week: bigint];
  export interface OutputObject {
    merkleRoot: string;
    week: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultUpdatedEvent {
  export type InputTuple = [oldVault: AddressLike, newVault: AddressLike];
  export type OutputTuple = [oldVault: string, newVault: string];
  export interface OutputObject {
    oldVault: string;
    newVault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MerkleDistributor2 extends BaseContract {
  connect(runner?: ContractRunner | null): MerkleDistributor2;
  waitForDeployment(): Promise<this>;

  interface: MerkleDistributor2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CRVETH_CRV_INDEX: TypedContractMethod<[], [bigint], "view">;

  CRVETH_ETH_INDEX: TypedContractMethod<[], [bigint], "view">;

  CRV_TOKEN: TypedContractMethod<[], [string], "view">;

  CURVE_CRV_ETH_POOL: TypedContractMethod<[], [string], "view">;

  CURVE_CVXCRV_CRV_POOL: TypedContractMethod<[], [string], "view">;

  CURVE_CVX_ETH_POOL: TypedContractMethod<[], [string], "view">;

  CVXCRV_CRV_INDEX: TypedContractMethod<[], [bigint], "view">;

  CVXCRV_CVXCRV_INDEX: TypedContractMethod<[], [bigint], "view">;

  CVXCRV_STAKING_CONTRACT: TypedContractMethod<[], [string], "view">;

  CVXCRV_TOKEN: TypedContractMethod<[], [string], "view">;

  CVXETH_CVX_INDEX: TypedContractMethod<[], [bigint], "view">;

  CVXETH_ETH_INDEX: TypedContractMethod<[], [bigint], "view">;

  CVX_TOKEN: TypedContractMethod<[], [string], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  claim: TypedContractMethod<
    [
      index: BigNumberish,
      account: AddressLike,
      amount: BigNumberish,
      merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  "claimAs(uint256,address,uint256,bytes32[],uint8)": TypedContractMethod<
    [
      index: BigNumberish,
      account: AddressLike,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      option: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "claimAs(uint256,address,uint256,bytes32[],uint8,uint256)": TypedContractMethod<
    [
      index: BigNumberish,
      account: AddressLike,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      option: BigNumberish,
      minAmountOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositor: TypedContractMethod<[], [string], "view">;

  freeze: TypedContractMethod<[], [void], "nonpayable">;

  frozen: TypedContractMethod<[], [boolean], "view">;

  isClaimed: TypedContractMethod<[index: BigNumberish], [boolean], "view">;

  merkleRoot: TypedContractMethod<[], [string], "view">;

  setApprovals: TypedContractMethod<[], [void], "nonpayable">;

  stake: TypedContractMethod<[], [void], "nonpayable">;

  unfreeze: TypedContractMethod<[], [void], "nonpayable">;

  updateAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  updateDepositor: TypedContractMethod<
    [newDepositor: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMerkleRoot: TypedContractMethod<
    [_merkleRoot: BytesLike, _unfreeze: boolean],
    [void],
    "nonpayable"
  >;

  updateVault: TypedContractMethod<
    [newVault: AddressLike],
    [void],
    "nonpayable"
  >;

  vault: TypedContractMethod<[], [string], "view">;

  week: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CRVETH_CRV_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CRVETH_ETH_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CRV_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CURVE_CRV_ETH_POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CURVE_CVXCRV_CRV_POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CURVE_CVX_ETH_POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CVXCRV_CRV_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CVXCRV_CVXCRV_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CVXCRV_STAKING_CONTRACT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CVXCRV_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CVXETH_CVX_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CVXETH_ETH_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CVX_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [
      index: BigNumberish,
      account: AddressLike,
      amount: BigNumberish,
      merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimAs(uint256,address,uint256,bytes32[],uint8)"
  ): TypedContractMethod<
    [
      index: BigNumberish,
      account: AddressLike,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      option: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimAs(uint256,address,uint256,bytes32[],uint8,uint256)"
  ): TypedContractMethod<
    [
      index: BigNumberish,
      account: AddressLike,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      option: BigNumberish,
      minAmountOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "freeze"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "frozen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isClaimed"
  ): TypedContractMethod<[index: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "merkleRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setApprovals"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unfreeze"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDepositor"
  ): TypedContractMethod<[newDepositor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMerkleRoot"
  ): TypedContractMethod<
    [_merkleRoot: BytesLike, _unfreeze: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateVault"
  ): TypedContractMethod<[newVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "week"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AdminUpdated"
  ): TypedContractEvent<
    AdminUpdatedEvent.InputTuple,
    AdminUpdatedEvent.OutputTuple,
    AdminUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "DepositorUpdated"
  ): TypedContractEvent<
    DepositorUpdatedEvent.InputTuple,
    DepositorUpdatedEvent.OutputTuple,
    DepositorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MerkleRootUpdated"
  ): TypedContractEvent<
    MerkleRootUpdatedEvent.InputTuple,
    MerkleRootUpdatedEvent.OutputTuple,
    MerkleRootUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VaultUpdated"
  ): TypedContractEvent<
    VaultUpdatedEvent.InputTuple,
    VaultUpdatedEvent.OutputTuple,
    VaultUpdatedEvent.OutputObject
  >;

  filters: {
    "AdminUpdated(address,address)": TypedContractEvent<
      AdminUpdatedEvent.InputTuple,
      AdminUpdatedEvent.OutputTuple,
      AdminUpdatedEvent.OutputObject
    >;
    AdminUpdated: TypedContractEvent<
      AdminUpdatedEvent.InputTuple,
      AdminUpdatedEvent.OutputTuple,
      AdminUpdatedEvent.OutputObject
    >;

    "Claimed(uint256,uint256,address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "DepositorUpdated(address,address)": TypedContractEvent<
      DepositorUpdatedEvent.InputTuple,
      DepositorUpdatedEvent.OutputTuple,
      DepositorUpdatedEvent.OutputObject
    >;
    DepositorUpdated: TypedContractEvent<
      DepositorUpdatedEvent.InputTuple,
      DepositorUpdatedEvent.OutputTuple,
      DepositorUpdatedEvent.OutputObject
    >;

    "MerkleRootUpdated(bytes32,uint32)": TypedContractEvent<
      MerkleRootUpdatedEvent.InputTuple,
      MerkleRootUpdatedEvent.OutputTuple,
      MerkleRootUpdatedEvent.OutputObject
    >;
    MerkleRootUpdated: TypedContractEvent<
      MerkleRootUpdatedEvent.InputTuple,
      MerkleRootUpdatedEvent.OutputTuple,
      MerkleRootUpdatedEvent.OutputObject
    >;

    "VaultUpdated(address,address)": TypedContractEvent<
      VaultUpdatedEvent.InputTuple,
      VaultUpdatedEvent.OutputTuple,
      VaultUpdatedEvent.OutputObject
    >;
    VaultUpdated: TypedContractEvent<
      VaultUpdatedEvent.InputTuple,
      VaultUpdatedEvent.OutputTuple,
      VaultUpdatedEvent.OutputObject
    >;
  };
}
