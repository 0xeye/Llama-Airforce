/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface UnionVaultUCrvInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CRVETH_CRV_INDEX"
      | "CRVETH_ETH_INDEX"
      | "CRV_TOKEN"
      | "CURVE_CRV_ETH_POOL"
      | "CURVE_CVXCRV_CRV_POOL"
      | "CURVE_CVX_ETH_POOL"
      | "CVXCRV_CRV_INDEX"
      | "CVXCRV_CVXCRV_INDEX"
      | "CVXCRV_STAKING_CONTRACT"
      | "CVXCRV_TOKEN"
      | "CVXETH_CVX_INDEX"
      | "CVXETH_ETH_INDEX"
      | "CVX_TOKEN"
      | "FEE_DENOMINATOR"
      | "MAX_CALL_INCENTIVE"
      | "MAX_PLATFORM_FEE"
      | "MAX_WITHDRAWAL_PENALTY"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "balanceOfUnderlying"
      | "callIncentive"
      | "decimals"
      | "decreaseAllowance"
      | "deposit"
      | "depositAll"
      | "harvest"
      | "increaseAllowance"
      | "name"
      | "outstanding3CrvRewards"
      | "outstandingCrvRewards"
      | "outstandingCvxRewards"
      | "owner"
      | "platform"
      | "platformFee"
      | "renounceOwnership"
      | "setApprovals"
      | "setCallIncentive"
      | "setPlatform"
      | "setPlatformFee"
      | "setWithdrawalPenalty"
      | "symbol"
      | "totalUnderlying"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "underlying"
      | "withdraw"
      | "withdrawAll"
      | "withdrawAllAs(address,uint8,uint256)"
      | "withdrawAllAs(address,uint8)"
      | "withdrawAs(address,uint256,uint8)"
      | "withdrawAs(address,uint256,uint8,uint256)"
      | "withdrawalPenalty"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "CallerIncentiveUpdated"
      | "Deposit"
      | "Harvest"
      | "OwnershipTransferred"
      | "PlatformFeeUpdated"
      | "PlatformUpdated"
      | "Transfer"
      | "Withdraw"
      | "WithdrawalPenaltyUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CRVETH_CRV_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRVETH_ETH_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CRV_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CURVE_CRV_ETH_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CURVE_CVXCRV_CRV_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CURVE_CVX_ETH_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXCRV_CRV_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXCRV_CVXCRV_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXCRV_STAKING_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXCRV_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXETH_CVX_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVXETH_ETH_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CVX_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CALL_INCENTIVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PLATFORM_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WITHDRAWAL_PENALTY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnderlying",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAll",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "outstanding3CrvRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "outstandingCrvRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "outstandingCvxRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "platform", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCallIncentive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatform",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalPenalty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllAs(address,uint8,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllAs(address,uint8)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAs(address,uint256,uint8)",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAs(address,uint256,uint8,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalPenalty",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CRVETH_CRV_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CRVETH_ETH_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CRV_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CURVE_CRV_ETH_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CURVE_CVXCRV_CRV_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CURVE_CVX_ETH_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXCRV_CRV_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXCRV_CVXCRV_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXCRV_STAKING_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXCRV_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXETH_CVX_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVXETH_ETH_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CVX_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CALL_INCENTIVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PLATFORM_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_WITHDRAWAL_PENALTY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "outstanding3CrvRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "outstandingCrvRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "outstandingCvxRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "platform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCallIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllAs(address,uint8,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllAs(address,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAs(address,uint256,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAs(address,uint256,uint8,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalPenalty",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallerIncentiveUpdatedEvent {
  export type InputTuple = [_incentive: BigNumberish];
  export type OutputTuple = [_incentive: bigint];
  export interface OutputObject {
    _incentive: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    _from: AddressLike,
    _to: AddressLike,
    _value: BigNumberish
  ];
  export type OutputTuple = [_from: string, _to: string, _value: bigint];
  export interface OutputObject {
    _from: string;
    _to: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HarvestEvent {
  export type InputTuple = [_caller: AddressLike, _value: BigNumberish];
  export type OutputTuple = [_caller: string, _value: bigint];
  export interface OutputObject {
    _caller: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeUpdatedEvent {
  export type InputTuple = [_fee: BigNumberish];
  export type OutputTuple = [_fee: bigint];
  export interface OutputObject {
    _fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformUpdatedEvent {
  export type InputTuple = [_platform: AddressLike];
  export type OutputTuple = [_platform: string];
  export interface OutputObject {
    _platform: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    _from: AddressLike,
    _to: AddressLike,
    _value: BigNumberish
  ];
  export type OutputTuple = [_from: string, _to: string, _value: bigint];
  export interface OutputObject {
    _from: string;
    _to: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalPenaltyUpdatedEvent {
  export type InputTuple = [_penalty: BigNumberish];
  export type OutputTuple = [_penalty: bigint];
  export interface OutputObject {
    _penalty: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UnionVaultUCrv extends BaseContract {
  connect(runner?: ContractRunner | null): UnionVaultUCrv;
  waitForDeployment(): Promise<this>;

  interface: UnionVaultUCrvInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CRVETH_CRV_INDEX: TypedContractMethod<[], [bigint], "view">;

  CRVETH_ETH_INDEX: TypedContractMethod<[], [bigint], "view">;

  CRV_TOKEN: TypedContractMethod<[], [string], "view">;

  CURVE_CRV_ETH_POOL: TypedContractMethod<[], [string], "view">;

  CURVE_CVXCRV_CRV_POOL: TypedContractMethod<[], [string], "view">;

  CURVE_CVX_ETH_POOL: TypedContractMethod<[], [string], "view">;

  CVXCRV_CRV_INDEX: TypedContractMethod<[], [bigint], "view">;

  CVXCRV_CVXCRV_INDEX: TypedContractMethod<[], [bigint], "view">;

  CVXCRV_STAKING_CONTRACT: TypedContractMethod<[], [string], "view">;

  CVXCRV_TOKEN: TypedContractMethod<[], [string], "view">;

  CVXETH_CVX_INDEX: TypedContractMethod<[], [bigint], "view">;

  CVXETH_ETH_INDEX: TypedContractMethod<[], [bigint], "view">;

  CVX_TOKEN: TypedContractMethod<[], [string], "view">;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  MAX_CALL_INCENTIVE: TypedContractMethod<[], [bigint], "view">;

  MAX_PLATFORM_FEE: TypedContractMethod<[], [bigint], "view">;

  MAX_WITHDRAWAL_PENALTY: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  balanceOfUnderlying: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  callIncentive: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  depositAll: TypedContractMethod<[_to: AddressLike], [bigint], "nonpayable">;

  harvest: TypedContractMethod<[], [void], "nonpayable">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  outstanding3CrvRewards: TypedContractMethod<[], [bigint], "view">;

  outstandingCrvRewards: TypedContractMethod<[], [bigint], "view">;

  outstandingCvxRewards: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  platform: TypedContractMethod<[], [string], "view">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setApprovals: TypedContractMethod<[], [void], "nonpayable">;

  setCallIncentive: TypedContractMethod<
    [_incentive: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPlatform: TypedContractMethod<
    [_platform: AddressLike],
    [void],
    "nonpayable"
  >;

  setPlatformFee: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWithdrawalPenalty: TypedContractMethod<
    [_penalty: BigNumberish],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalUnderlying: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  underlying: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [_to: AddressLike, _shares: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  withdrawAll: TypedContractMethod<[_to: AddressLike], [bigint], "nonpayable">;

  "withdrawAllAs(address,uint8,uint256)": TypedContractMethod<
    [_to: AddressLike, option: BigNumberish, minAmountOut: BigNumberish],
    [void],
    "nonpayable"
  >;

  "withdrawAllAs(address,uint8)": TypedContractMethod<
    [_to: AddressLike, option: BigNumberish],
    [void],
    "nonpayable"
  >;

  "withdrawAs(address,uint256,uint8)": TypedContractMethod<
    [_to: AddressLike, _shares: BigNumberish, option: BigNumberish],
    [void],
    "nonpayable"
  >;

  "withdrawAs(address,uint256,uint8,uint256)": TypedContractMethod<
    [
      _to: AddressLike,
      _shares: BigNumberish,
      option: BigNumberish,
      minAmountOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawalPenalty: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CRVETH_CRV_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CRVETH_ETH_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CRV_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CURVE_CRV_ETH_POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CURVE_CVXCRV_CRV_POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CURVE_CVX_ETH_POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CVXCRV_CRV_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CVXCRV_CVXCRV_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CVXCRV_STAKING_CONTRACT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CVXCRV_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CVXETH_CVX_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CVXETH_ETH_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CVX_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_CALL_INCENTIVE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PLATFORM_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_WITHDRAWAL_PENALTY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfUnderlying"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "callIncentive"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositAll"
  ): TypedContractMethod<[_to: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "harvest"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "outstanding3CrvRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "outstandingCrvRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "outstandingCvxRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platform"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setApprovals"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCallIncentive"
  ): TypedContractMethod<[_incentive: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatform"
  ): TypedContractMethod<[_platform: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWithdrawalPenalty"
  ): TypedContractMethod<[_penalty: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalUnderlying"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "underlying"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_to: AddressLike, _shares: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAll"
  ): TypedContractMethod<[_to: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawAllAs(address,uint8,uint256)"
  ): TypedContractMethod<
    [_to: AddressLike, option: BigNumberish, minAmountOut: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAllAs(address,uint8)"
  ): TypedContractMethod<
    [_to: AddressLike, option: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAs(address,uint256,uint8)"
  ): TypedContractMethod<
    [_to: AddressLike, _shares: BigNumberish, option: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAs(address,uint256,uint8,uint256)"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _shares: BigNumberish,
      option: BigNumberish,
      minAmountOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawalPenalty"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "CallerIncentiveUpdated"
  ): TypedContractEvent<
    CallerIncentiveUpdatedEvent.InputTuple,
    CallerIncentiveUpdatedEvent.OutputTuple,
    CallerIncentiveUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Harvest"
  ): TypedContractEvent<
    HarvestEvent.InputTuple,
    HarvestEvent.OutputTuple,
    HarvestEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeUpdated"
  ): TypedContractEvent<
    PlatformFeeUpdatedEvent.InputTuple,
    PlatformFeeUpdatedEvent.OutputTuple,
    PlatformFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PlatformUpdated"
  ): TypedContractEvent<
    PlatformUpdatedEvent.InputTuple,
    PlatformUpdatedEvent.OutputTuple,
    PlatformUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalPenaltyUpdated"
  ): TypedContractEvent<
    WithdrawalPenaltyUpdatedEvent.InputTuple,
    WithdrawalPenaltyUpdatedEvent.OutputTuple,
    WithdrawalPenaltyUpdatedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "CallerIncentiveUpdated(uint256)": TypedContractEvent<
      CallerIncentiveUpdatedEvent.InputTuple,
      CallerIncentiveUpdatedEvent.OutputTuple,
      CallerIncentiveUpdatedEvent.OutputObject
    >;
    CallerIncentiveUpdated: TypedContractEvent<
      CallerIncentiveUpdatedEvent.InputTuple,
      CallerIncentiveUpdatedEvent.OutputTuple,
      CallerIncentiveUpdatedEvent.OutputObject
    >;

    "Deposit(address,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Harvest(address,uint256)": TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;
    Harvest: TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlatformFeeUpdated(uint256)": TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;
    PlatformFeeUpdated: TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;

    "PlatformUpdated(address)": TypedContractEvent<
      PlatformUpdatedEvent.InputTuple,
      PlatformUpdatedEvent.OutputTuple,
      PlatformUpdatedEvent.OutputObject
    >;
    PlatformUpdated: TypedContractEvent<
      PlatformUpdatedEvent.InputTuple,
      PlatformUpdatedEvent.OutputTuple,
      PlatformUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Withdraw(address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "WithdrawalPenaltyUpdated(uint256)": TypedContractEvent<
      WithdrawalPenaltyUpdatedEvent.InputTuple,
      WithdrawalPenaltyUpdatedEvent.OutputTuple,
      WithdrawalPenaltyUpdatedEvent.OutputObject
    >;
    WithdrawalPenaltyUpdated: TypedContractEvent<
      WithdrawalPenaltyUpdatedEvent.InputTuple,
      WithdrawalPenaltyUpdatedEvent.OutputTuple,
      WithdrawalPenaltyUpdatedEvent.OutputObject
    >;
  };
}
