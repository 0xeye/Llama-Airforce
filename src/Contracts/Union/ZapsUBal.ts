/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ZapsUBalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AURABAL_PT_DEPOSIT"
      | "AURABAL_STAKING"
      | "AURABAL_TOKEN"
      | "AURA_TOKEN"
      | "BAL_ETH_POOL_TOKEN"
      | "BAL_TOKEN"
      | "BAL_VAULT"
      | "BBUSD_TOKEN"
      | "WETH_TOKEN"
      | "auraBalStaking"
      | "balVault"
      | "bptDepositor"
      | "claimFromVaultAsUnderlying"
      | "claimFromVaultViaUniV2EthPair"
      | "depositFromEth"
      | "depositFromUnderlyingAssets"
      | "depositViaUniV2EthPair"
      | "setApprovals"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AURABAL_PT_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AURABAL_STAKING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AURABAL_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AURA_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BAL_ETH_POOL_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BAL_TOKEN", values?: undefined): string;
  encodeFunctionData(functionFragment: "BAL_VAULT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BBUSD_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WETH_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auraBalStaking",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bptDepositor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromVaultAsUnderlying",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromVaultViaUniV2EthPair",
    values: [BigNumberish, BigNumberish, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFromEth",
    values: [BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFromUnderlyingAssets",
    values: [[BigNumberish, BigNumberish], BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositViaUniV2EthPair",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "AURABAL_PT_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AURABAL_STAKING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AURABAL_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "AURA_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BAL_ETH_POOL_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BAL_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BAL_VAULT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BBUSD_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auraBalStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bptDepositor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromVaultAsUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromVaultViaUniV2EthPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFromEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFromUnderlyingAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositViaUniV2EthPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
}

export interface ZapsUBal extends BaseContract {
  connect(runner?: ContractRunner | null): ZapsUBal;
  waitForDeployment(): Promise<this>;

  interface: ZapsUBalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AURABAL_PT_DEPOSIT: TypedContractMethod<[], [string], "view">;

  AURABAL_STAKING: TypedContractMethod<[], [string], "view">;

  AURABAL_TOKEN: TypedContractMethod<[], [string], "view">;

  AURA_TOKEN: TypedContractMethod<[], [string], "view">;

  BAL_ETH_POOL_TOKEN: TypedContractMethod<[], [string], "view">;

  BAL_TOKEN: TypedContractMethod<[], [string], "view">;

  BAL_VAULT: TypedContractMethod<[], [string], "view">;

  BBUSD_TOKEN: TypedContractMethod<[], [string], "view">;

  WETH_TOKEN: TypedContractMethod<[], [string], "view">;

  auraBalStaking: TypedContractMethod<[], [string], "view">;

  balVault: TypedContractMethod<[], [string], "view">;

  bptDepositor: TypedContractMethod<[], [string], "view">;

  claimFromVaultAsUnderlying: TypedContractMethod<
    [
      _amount: BigNumberish,
      _assetIndex: BigNumberish,
      _minAmountOut: BigNumberish,
      _to: AddressLike,
      _useWrappedEth: boolean
    ],
    [void],
    "nonpayable"
  >;

  claimFromVaultViaUniV2EthPair: TypedContractMethod<
    [
      _amount: BigNumberish,
      _minAmountOut: BigNumberish,
      _router: AddressLike,
      _outputToken: AddressLike,
      _to: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  depositFromEth: TypedContractMethod<
    [_minAmountOut: BigNumberish, _to: AddressLike, _lock: boolean],
    [void],
    "payable"
  >;

  depositFromUnderlyingAssets: TypedContractMethod<
    [
      _amounts: [BigNumberish, BigNumberish],
      _minAmountOut: BigNumberish,
      _to: AddressLike,
      _lock: boolean
    ],
    [void],
    "nonpayable"
  >;

  depositViaUniV2EthPair: TypedContractMethod<
    [
      _amount: BigNumberish,
      _minAmountOut: BigNumberish,
      _router: AddressLike,
      _inputToken: AddressLike,
      _to: AddressLike,
      _lock: boolean
    ],
    [void],
    "nonpayable"
  >;

  setApprovals: TypedContractMethod<[], [void], "nonpayable">;

  vault: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AURABAL_PT_DEPOSIT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "AURABAL_STAKING"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "AURABAL_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "AURA_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BAL_ETH_POOL_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BAL_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BAL_VAULT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BBUSD_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WETH_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "auraBalStaking"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bptDepositor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimFromVaultAsUnderlying"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      _assetIndex: BigNumberish,
      _minAmountOut: BigNumberish,
      _to: AddressLike,
      _useWrappedEth: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFromVaultViaUniV2EthPair"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      _minAmountOut: BigNumberish,
      _router: AddressLike,
      _outputToken: AddressLike,
      _to: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositFromEth"
  ): TypedContractMethod<
    [_minAmountOut: BigNumberish, _to: AddressLike, _lock: boolean],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositFromUnderlyingAssets"
  ): TypedContractMethod<
    [
      _amounts: [BigNumberish, BigNumberish],
      _minAmountOut: BigNumberish,
      _to: AddressLike,
      _lock: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositViaUniV2EthPair"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      _minAmountOut: BigNumberish,
      _router: AddressLike,
      _inputToken: AddressLike,
      _to: AddressLike,
      _lock: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovals"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
