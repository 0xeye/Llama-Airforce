/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VotiumRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchAddressCheck"
      | "currentEpoch"
      | "eDuration"
      | "execute"
      | "forceRegistry"
      | "forceToExpire"
      | "forwardHistory"
      | "forwardLength"
      | "forwardPage"
      | "inForwardHistory"
      | "inOptOutHistory"
      | "nextEpoch"
      | "optOutHistory"
      | "optOutLength"
      | "optOutPage"
      | "owner"
      | "registry"
      | "setRegistry"
      | "setToExpire"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "expReg" | "setReg"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchAddressCheck",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "eDuration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forceRegistry",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forceToExpire",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forwardHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forwardLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forwardPage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "inForwardHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "inOptOutHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nextEpoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "optOutHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "optOutLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optOutPage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setToExpire",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchAddressCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eDuration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceToExpire",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwardHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwardLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwardPage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inForwardHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inOptOutHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextEpoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optOutHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optOutLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "optOutPage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setToExpire",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace expRegEvent {
  export type InputTuple = [_from: AddressLike, _end: BigNumberish];
  export type OutputTuple = [_from: string, _end: bigint];
  export interface OutputObject {
    _from: string;
    _end: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace setRegEvent {
  export type InputTuple = [
    _from: AddressLike,
    _to: AddressLike,
    _start: BigNumberish
  ];
  export type OutputTuple = [_from: string, _to: string, _start: bigint];
  export interface OutputObject {
    _from: string;
    _to: string;
    _start: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VotiumRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): VotiumRegistry;
  waitForDeployment(): Promise<this>;

  interface: VotiumRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchAddressCheck: TypedContractMethod<
    [accounts: AddressLike[]],
    [string[]],
    "view"
  >;

  currentEpoch: TypedContractMethod<[], [bigint], "view">;

  eDuration: TypedContractMethod<[], [bigint], "view">;

  execute: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _data: BytesLike],
    [[boolean, string]],
    "nonpayable"
  >;

  forceRegistry: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  forceToExpire: TypedContractMethod<
    [_from: AddressLike],
    [void],
    "nonpayable"
  >;

  forwardHistory: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  forwardLength: TypedContractMethod<[], [bigint], "view">;

  forwardPage: TypedContractMethod<
    [size: BigNumberish, page: BigNumberish],
    [string[]],
    "view"
  >;

  inForwardHistory: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  inOptOutHistory: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  nextEpoch: TypedContractMethod<[], [bigint], "view">;

  optOutHistory: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  optOutLength: TypedContractMethod<[], [bigint], "view">;

  optOutPage: TypedContractMethod<
    [size: BigNumberish, page: BigNumberish],
    [string[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registry: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, string, bigint] & {
        start: bigint;
        to: string;
        expiration: bigint;
      }
    ],
    "view"
  >;

  setRegistry: TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;

  setToExpire: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchAddressCheck"
  ): TypedContractMethod<[accounts: AddressLike[]], [string[]], "view">;
  getFunction(
    nameOrSignature: "currentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _data: BytesLike],
    [[boolean, string]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "forceRegistry"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "forceToExpire"
  ): TypedContractMethod<[_from: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "forwardHistory"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "forwardLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "forwardPage"
  ): TypedContractMethod<
    [size: BigNumberish, page: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "inForwardHistory"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "inOptOutHistory"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "optOutHistory"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "optOutLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "optOutPage"
  ): TypedContractMethod<
    [size: BigNumberish, page: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, string, bigint] & {
        start: bigint;
        to: string;
        expiration: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setRegistry"
  ): TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setToExpire"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "expReg"
  ): TypedContractEvent<
    expRegEvent.InputTuple,
    expRegEvent.OutputTuple,
    expRegEvent.OutputObject
  >;
  getEvent(
    key: "setReg"
  ): TypedContractEvent<
    setRegEvent.InputTuple,
    setRegEvent.OutputTuple,
    setRegEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "expReg(address,uint256)": TypedContractEvent<
      expRegEvent.InputTuple,
      expRegEvent.OutputTuple,
      expRegEvent.OutputObject
    >;
    expReg: TypedContractEvent<
      expRegEvent.InputTuple,
      expRegEvent.OutputTuple,
      expRegEvent.OutputObject
    >;

    "setReg(address,address,uint256)": TypedContractEvent<
      setRegEvent.InputTuple,
      setRegEvent.OutputTuple,
      setRegEvent.OutputObject
    >;
    setReg: TypedContractEvent<
      setRegEvent.InputTuple,
      setRegEvent.OutputTuple,
      setRegEvent.OutputObject
    >;
  };
}
