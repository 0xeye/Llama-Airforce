/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TheLlamasInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "supportsInterface"
      | "balanceOf"
      | "ownerOf"
      | "getApproved"
      | "isApprovedForAll"
      | "transferFrom"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "approve"
      | "setApprovalForAll"
      | "allowlistMint"
      | "mint"
      | "tokenURI"
      | "contractURI"
      | "set_minter"
      | "set_al_signer"
      | "set_base_uri"
      | "set_contract_uri"
      | "set_owner"
      | "set_revealed"
      | "withdraw"
      | "admin_withdraw_erc20"
      | "start_al_mint"
      | "stop_al_mint"
      | "totalSupply"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokensForOwner"
      | "symbol"
      | "name"
      | "owner"
      | "base_uri"
      | "revealed"
      | "default_uri"
      | "al_mint_started"
      | "al_signer"
      | "minter"
      | "al_mint_amount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Transfer" | "Approval" | "ApprovalForAll"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistMint",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "mint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set_minter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "set_al_signer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "set_base_uri",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "set_contract_uri",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "set_owner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "set_revealed",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "admin_withdraw_erc20",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "start_al_mint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stop_al_mint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "base_uri", values?: undefined): string;
  encodeFunctionData(functionFragment: "revealed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "default_uri",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "al_mint_started",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "al_signer", values?: undefined): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "al_mint_amount",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_minter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_al_signer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_base_uri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_contract_uri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_revealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "admin_withdraw_erc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "start_al_mint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stop_al_mint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "base_uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revealed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "default_uri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "al_mint_started",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "al_signer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "al_mint_amount",
    data: BytesLike
  ): Result;
}

export namespace TransferEvent {
  export type InputTuple = [
    _from: AddressLike,
    _to: AddressLike,
    _tokenId: BigNumberish
  ];
  export type OutputTuple = [_from: string, _to: string, _tokenId: bigint];
  export interface OutputObject {
    _from: string;
    _to: string;
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _approved: AddressLike,
    _tokenId: BigNumberish
  ];
  export type OutputTuple = [
    _owner: string,
    _approved: string,
    _tokenId: bigint
  ];
  export interface OutputObject {
    _owner: string;
    _approved: string;
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _operator: AddressLike,
    _approved: boolean
  ];
  export type OutputTuple = [
    _owner: string,
    _operator: string,
    _approved: boolean
  ];
  export interface OutputObject {
    _owner: string;
    _operator: string;
    _approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TheLlamas extends BaseContract {
  connect(runner?: ContractRunner | null): TheLlamas;
  waitForDeployment(): Promise<this>;

  interface: TheLlamasInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  supportsInterface: TypedContractMethod<
    [interface_id: BytesLike],
    [boolean],
    "view"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  ownerOf: TypedContractMethod<[token_id: BigNumberish], [string], "view">;

  getApproved: TypedContractMethod<[token_id: BigNumberish], [string], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  transferFrom: TypedContractMethod<
    [from_addr: AddressLike, to_addr: AddressLike, token_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from_addr: AddressLike, to_addr: AddressLike, token_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from_addr: AddressLike,
      to_addr: AddressLike,
      token_id: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [approved: AddressLike, token_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  allowlistMint: TypedContractMethod<
    [mint_amount: BigNumberish, approved_amount: BigNumberish, sig: BytesLike],
    [void],
    "payable"
  >;

  mint: TypedContractMethod<[], [bigint], "nonpayable">;

  tokenURI: TypedContractMethod<[token_id: BigNumberish], [string], "view">;

  contractURI: TypedContractMethod<[], [string], "view">;

  set_minter: TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;

  set_al_signer: TypedContractMethod<
    [al_signer: AddressLike],
    [void],
    "nonpayable"
  >;

  set_base_uri: TypedContractMethod<[base_uri: string], [void], "nonpayable">;

  set_contract_uri: TypedContractMethod<
    [new_uri: string],
    [void],
    "nonpayable"
  >;

  set_owner: TypedContractMethod<[new_addr: AddressLike], [void], "nonpayable">;

  set_revealed: TypedContractMethod<[flag: boolean], [void], "nonpayable">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  admin_withdraw_erc20: TypedContractMethod<
    [coin: AddressLike, target: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  start_al_mint: TypedContractMethod<[], [void], "nonpayable">;

  stop_al_mint: TypedContractMethod<[], [void], "nonpayable">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  tokenByIndex: TypedContractMethod<[_index: BigNumberish], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  tokensForOwner: TypedContractMethod<[owner: AddressLike], [bigint[]], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  base_uri: TypedContractMethod<[], [string], "view">;

  revealed: TypedContractMethod<[], [boolean], "view">;

  default_uri: TypedContractMethod<[], [string], "view">;

  al_mint_started: TypedContractMethod<[], [boolean], "view">;

  al_signer: TypedContractMethod<[], [string], "view">;

  minter: TypedContractMethod<[], [string], "view">;

  al_mint_amount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interface_id: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[token_id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[token_id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from_addr: AddressLike, to_addr: AddressLike, token_id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from_addr: AddressLike, to_addr: AddressLike, token_id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from_addr: AddressLike,
      to_addr: AddressLike,
      token_id: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [approved: AddressLike, token_id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowlistMint"
  ): TypedContractMethod<
    [mint_amount: BigNumberish, approved_amount: BigNumberish, sig: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[token_id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "contractURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "set_minter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_al_signer"
  ): TypedContractMethod<[al_signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_base_uri"
  ): TypedContractMethod<[base_uri: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_contract_uri"
  ): TypedContractMethod<[new_uri: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_owner"
  ): TypedContractMethod<[new_addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_revealed"
  ): TypedContractMethod<[flag: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin_withdraw_erc20"
  ): TypedContractMethod<
    [coin: AddressLike, target: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "start_al_mint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stop_al_mint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[_index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokensForOwner"
  ): TypedContractMethod<[owner: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "base_uri"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revealed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "default_uri"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "al_mint_started"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "al_signer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "minter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "al_mint_amount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;

  filters: {
    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
  };
}
