/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CurveV2FactoryPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "exchange(uint256,uint256,uint256,uint256)"
      | "exchange(uint256,uint256,uint256,uint256,bool)"
      | "exchange(uint256,uint256,uint256,uint256,bool,address)"
      | "exchange_underlying(uint256,uint256,uint256,uint256)"
      | "exchange_underlying(uint256,uint256,uint256,uint256,address)"
      | "exchange_extended"
      | "add_liquidity(uint256[2],uint256)"
      | "add_liquidity(uint256[2],uint256,bool)"
      | "add_liquidity(uint256[2],uint256,bool,address)"
      | "remove_liquidity(uint256,uint256[2])"
      | "remove_liquidity(uint256,uint256[2],bool)"
      | "remove_liquidity(uint256,uint256[2],bool,address)"
      | "remove_liquidity_one_coin(uint256,uint256,uint256)"
      | "remove_liquidity_one_coin(uint256,uint256,uint256,bool)"
      | "remove_liquidity_one_coin(uint256,uint256,uint256,bool,address)"
      | "claim_admin_fees"
      | "ramp_A_gamma"
      | "stop_ramp_A_gamma"
      | "commit_new_parameters"
      | "apply_new_parameters"
      | "revert_new_parameters"
      | "get_dy"
      | "calc_token_amount"
      | "calc_withdraw_one_coin"
      | "lp_price"
      | "A"
      | "gamma"
      | "fee"
      | "get_virtual_price"
      | "price_oracle"
      | "initialize"
      | "token"
      | "coins"
      | "price_scale"
      | "last_prices"
      | "last_prices_timestamp"
      | "initial_A_gamma"
      | "future_A_gamma"
      | "initial_A_gamma_time"
      | "future_A_gamma_time"
      | "allowed_extra_profit"
      | "future_allowed_extra_profit"
      | "fee_gamma"
      | "future_fee_gamma"
      | "adjustment_step"
      | "future_adjustment_step"
      | "ma_half_time"
      | "future_ma_half_time"
      | "mid_fee"
      | "out_fee"
      | "admin_fee"
      | "future_mid_fee"
      | "future_out_fee"
      | "future_admin_fee"
      | "balances"
      | "D"
      | "factory"
      | "xcp_profit"
      | "xcp_profit_a"
      | "virtual_price"
      | "admin_actions_deadline"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "TokenExchange"
      | "AddLiquidity"
      | "RemoveLiquidity"
      | "RemoveLiquidityOne"
      | "CommitNewParameters"
      | "NewParameters"
      | "RampAgamma"
      | "StopRampA"
      | "ClaimAdminFee"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "exchange(uint256,uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange(uint256,uint256,uint256,uint256,bool)",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange(uint256,uint256,uint256,uint256,bool,address)",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange_underlying(uint256,uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange_underlying(uint256,uint256,uint256,uint256,address)",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange_extended",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      AddressLike,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "add_liquidity(uint256[2],uint256)",
    values: [[BigNumberish, BigNumberish], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "add_liquidity(uint256[2],uint256,bool)",
    values: [[BigNumberish, BigNumberish], BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "add_liquidity(uint256[2],uint256,bool,address)",
    values: [[BigNumberish, BigNumberish], BigNumberish, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity(uint256,uint256[2])",
    values: [BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity(uint256,uint256[2],bool)",
    values: [BigNumberish, [BigNumberish, BigNumberish], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity(uint256,uint256[2],bool,address)",
    values: [BigNumberish, [BigNumberish, BigNumberish], boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_one_coin(uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_one_coin(uint256,uint256,uint256,bool)",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_one_coin(uint256,uint256,uint256,bool,address)",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim_admin_fees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ramp_A_gamma",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stop_ramp_A_gamma",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commit_new_parameters",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "apply_new_parameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revert_new_parameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_dy",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calc_token_amount",
    values: [[BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "calc_withdraw_one_coin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lp_price", values?: undefined): string;
  encodeFunctionData(functionFragment: "A", values?: undefined): string;
  encodeFunctionData(functionFragment: "gamma", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "get_virtual_price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "price_oracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      [AddressLike, AddressLike],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "coins", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "price_scale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "last_prices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "last_prices_timestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initial_A_gamma",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_A_gamma",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initial_A_gamma_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_A_gamma_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowed_extra_profit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_allowed_extra_profit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee_gamma", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "future_fee_gamma",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adjustment_step",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_adjustment_step",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ma_half_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_ma_half_time",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mid_fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "out_fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin_fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "future_mid_fee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_out_fee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_admin_fee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "D", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "xcp_profit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "xcp_profit_a",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "virtual_price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "admin_actions_deadline",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "exchange(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange(uint256,uint256,uint256,uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange(uint256,uint256,uint256,uint256,bool,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange_underlying(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange_underlying(uint256,uint256,uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange_extended",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_liquidity(uint256[2],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_liquidity(uint256[2],uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_liquidity(uint256[2],uint256,bool,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity(uint256,uint256[2])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity(uint256,uint256[2],bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity(uint256,uint256[2],bool,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_one_coin(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_one_coin(uint256,uint256,uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_one_coin(uint256,uint256,uint256,bool,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claim_admin_fees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ramp_A_gamma",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stop_ramp_A_gamma",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commit_new_parameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "apply_new_parameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revert_new_parameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_dy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calc_token_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calc_withdraw_one_coin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lp_price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "A", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gamma", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_virtual_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "price_oracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "price_scale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "last_prices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "last_prices_timestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initial_A_gamma",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_A_gamma",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initial_A_gamma_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_A_gamma_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowed_extra_profit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_allowed_extra_profit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee_gamma", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "future_fee_gamma",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustment_step",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_adjustment_step",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ma_half_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_ma_half_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mid_fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "out_fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin_fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "future_mid_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_out_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_admin_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "D", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xcp_profit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xcp_profit_a",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "virtual_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "admin_actions_deadline",
    data: BytesLike
  ): Result;
}

export namespace TokenExchangeEvent {
  export type InputTuple = [
    buyer: AddressLike,
    sold_id: BigNumberish,
    tokens_sold: BigNumberish,
    bought_id: BigNumberish,
    tokens_bought: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    sold_id: bigint,
    tokens_sold: bigint,
    bought_id: bigint,
    tokens_bought: bigint
  ];
  export interface OutputObject {
    buyer: string;
    sold_id: bigint;
    tokens_sold: bigint;
    bought_id: bigint;
    tokens_bought: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquidityEvent {
  export type InputTuple = [
    provider: AddressLike,
    token_amounts: [BigNumberish, BigNumberish],
    fee: BigNumberish,
    token_supply: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    token_amounts: [bigint, bigint],
    fee: bigint,
    token_supply: bigint
  ];
  export interface OutputObject {
    provider: string;
    token_amounts: [bigint, bigint];
    fee: bigint;
    token_supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquidityEvent {
  export type InputTuple = [
    provider: AddressLike,
    token_amounts: [BigNumberish, BigNumberish],
    token_supply: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    token_amounts: [bigint, bigint],
    token_supply: bigint
  ];
  export interface OutputObject {
    provider: string;
    token_amounts: [bigint, bigint];
    token_supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquidityOneEvent {
  export type InputTuple = [
    provider: AddressLike,
    token_amount: BigNumberish,
    coin_index: BigNumberish,
    coin_amount: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    token_amount: bigint,
    coin_index: bigint,
    coin_amount: bigint
  ];
  export interface OutputObject {
    provider: string;
    token_amount: bigint;
    coin_index: bigint;
    coin_amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommitNewParametersEvent {
  export type InputTuple = [
    deadline: BigNumberish,
    admin_fee: BigNumberish,
    mid_fee: BigNumberish,
    out_fee: BigNumberish,
    fee_gamma: BigNumberish,
    allowed_extra_profit: BigNumberish,
    adjustment_step: BigNumberish,
    ma_half_time: BigNumberish
  ];
  export type OutputTuple = [
    deadline: bigint,
    admin_fee: bigint,
    mid_fee: bigint,
    out_fee: bigint,
    fee_gamma: bigint,
    allowed_extra_profit: bigint,
    adjustment_step: bigint,
    ma_half_time: bigint
  ];
  export interface OutputObject {
    deadline: bigint;
    admin_fee: bigint;
    mid_fee: bigint;
    out_fee: bigint;
    fee_gamma: bigint;
    allowed_extra_profit: bigint;
    adjustment_step: bigint;
    ma_half_time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewParametersEvent {
  export type InputTuple = [
    admin_fee: BigNumberish,
    mid_fee: BigNumberish,
    out_fee: BigNumberish,
    fee_gamma: BigNumberish,
    allowed_extra_profit: BigNumberish,
    adjustment_step: BigNumberish,
    ma_half_time: BigNumberish
  ];
  export type OutputTuple = [
    admin_fee: bigint,
    mid_fee: bigint,
    out_fee: bigint,
    fee_gamma: bigint,
    allowed_extra_profit: bigint,
    adjustment_step: bigint,
    ma_half_time: bigint
  ];
  export interface OutputObject {
    admin_fee: bigint;
    mid_fee: bigint;
    out_fee: bigint;
    fee_gamma: bigint;
    allowed_extra_profit: bigint;
    adjustment_step: bigint;
    ma_half_time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RampAgammaEvent {
  export type InputTuple = [
    initial_A: BigNumberish,
    future_A: BigNumberish,
    initial_gamma: BigNumberish,
    future_gamma: BigNumberish,
    initial_time: BigNumberish,
    future_time: BigNumberish
  ];
  export type OutputTuple = [
    initial_A: bigint,
    future_A: bigint,
    initial_gamma: bigint,
    future_gamma: bigint,
    initial_time: bigint,
    future_time: bigint
  ];
  export interface OutputObject {
    initial_A: bigint;
    future_A: bigint;
    initial_gamma: bigint;
    future_gamma: bigint;
    initial_time: bigint;
    future_time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StopRampAEvent {
  export type InputTuple = [
    current_A: BigNumberish,
    current_gamma: BigNumberish,
    time: BigNumberish
  ];
  export type OutputTuple = [
    current_A: bigint,
    current_gamma: bigint,
    time: bigint
  ];
  export interface OutputObject {
    current_A: bigint;
    current_gamma: bigint;
    time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimAdminFeeEvent {
  export type InputTuple = [admin: AddressLike, tokens: BigNumberish];
  export type OutputTuple = [admin: string, tokens: bigint];
  export interface OutputObject {
    admin: string;
    tokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CurveV2FactoryPool extends BaseContract {
  connect(runner?: ContractRunner | null): CurveV2FactoryPool;
  waitForDeployment(): Promise<this>;

  interface: CurveV2FactoryPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  "exchange(uint256,uint256,uint256,uint256)": TypedContractMethod<
    [i: BigNumberish, j: BigNumberish, dx: BigNumberish, min_dy: BigNumberish],
    [bigint],
    "payable"
  >;

  "exchange(uint256,uint256,uint256,uint256,bool)": TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      use_eth: boolean
    ],
    [bigint],
    "payable"
  >;

  "exchange(uint256,uint256,uint256,uint256,bool,address)": TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      use_eth: boolean,
      receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;

  "exchange_underlying(uint256,uint256,uint256,uint256)": TypedContractMethod<
    [i: BigNumberish, j: BigNumberish, dx: BigNumberish, min_dy: BigNumberish],
    [bigint],
    "payable"
  >;

  "exchange_underlying(uint256,uint256,uint256,uint256,address)": TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;

  exchange_extended: TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      use_eth: boolean,
      sender: AddressLike,
      receiver: AddressLike,
      cb: BytesLike
    ],
    [bigint],
    "payable"
  >;

  "add_liquidity(uint256[2],uint256)": TypedContractMethod<
    [amounts: [BigNumberish, BigNumberish], min_mint_amount: BigNumberish],
    [bigint],
    "payable"
  >;

  "add_liquidity(uint256[2],uint256,bool)": TypedContractMethod<
    [
      amounts: [BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      use_eth: boolean
    ],
    [bigint],
    "payable"
  >;

  "add_liquidity(uint256[2],uint256,bool,address)": TypedContractMethod<
    [
      amounts: [BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      use_eth: boolean,
      receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;

  "remove_liquidity(uint256,uint256[2])": TypedContractMethod<
    [_amount: BigNumberish, min_amounts: [BigNumberish, BigNumberish]],
    [void],
    "nonpayable"
  >;

  "remove_liquidity(uint256,uint256[2],bool)": TypedContractMethod<
    [
      _amount: BigNumberish,
      min_amounts: [BigNumberish, BigNumberish],
      use_eth: boolean
    ],
    [void],
    "nonpayable"
  >;

  "remove_liquidity(uint256,uint256[2],bool,address)": TypedContractMethod<
    [
      _amount: BigNumberish,
      min_amounts: [BigNumberish, BigNumberish],
      use_eth: boolean,
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  "remove_liquidity_one_coin(uint256,uint256,uint256)": TypedContractMethod<
    [token_amount: BigNumberish, i: BigNumberish, min_amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  "remove_liquidity_one_coin(uint256,uint256,uint256,bool)": TypedContractMethod<
    [
      token_amount: BigNumberish,
      i: BigNumberish,
      min_amount: BigNumberish,
      use_eth: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  "remove_liquidity_one_coin(uint256,uint256,uint256,bool,address)": TypedContractMethod<
    [
      token_amount: BigNumberish,
      i: BigNumberish,
      min_amount: BigNumberish,
      use_eth: boolean,
      receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  claim_admin_fees: TypedContractMethod<[], [void], "nonpayable">;

  ramp_A_gamma: TypedContractMethod<
    [
      future_A: BigNumberish,
      future_gamma: BigNumberish,
      future_time: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  stop_ramp_A_gamma: TypedContractMethod<[], [void], "nonpayable">;

  commit_new_parameters: TypedContractMethod<
    [
      _new_mid_fee: BigNumberish,
      _new_out_fee: BigNumberish,
      _new_admin_fee: BigNumberish,
      _new_fee_gamma: BigNumberish,
      _new_allowed_extra_profit: BigNumberish,
      _new_adjustment_step: BigNumberish,
      _new_ma_half_time: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  apply_new_parameters: TypedContractMethod<[], [void], "nonpayable">;

  revert_new_parameters: TypedContractMethod<[], [void], "nonpayable">;

  get_dy: TypedContractMethod<
    [i: BigNumberish, j: BigNumberish, dx: BigNumberish],
    [bigint],
    "view"
  >;

  calc_token_amount: TypedContractMethod<
    [amounts: [BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;

  calc_withdraw_one_coin: TypedContractMethod<
    [token_amount: BigNumberish, i: BigNumberish],
    [bigint],
    "view"
  >;

  lp_price: TypedContractMethod<[], [bigint], "view">;

  A: TypedContractMethod<[], [bigint], "view">;

  gamma: TypedContractMethod<[], [bigint], "view">;

  fee: TypedContractMethod<[], [bigint], "view">;

  get_virtual_price: TypedContractMethod<[], [bigint], "view">;

  price_oracle: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      A: BigNumberish,
      gamma: BigNumberish,
      mid_fee: BigNumberish,
      out_fee: BigNumberish,
      allowed_extra_profit: BigNumberish,
      fee_gamma: BigNumberish,
      adjustment_step: BigNumberish,
      admin_fee: BigNumberish,
      ma_half_time: BigNumberish,
      initial_price: BigNumberish,
      _token: AddressLike,
      _coins: [AddressLike, AddressLike],
      _precisions: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  coins: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  price_scale: TypedContractMethod<[], [bigint], "view">;

  last_prices: TypedContractMethod<[], [bigint], "view">;

  last_prices_timestamp: TypedContractMethod<[], [bigint], "view">;

  initial_A_gamma: TypedContractMethod<[], [bigint], "view">;

  future_A_gamma: TypedContractMethod<[], [bigint], "view">;

  initial_A_gamma_time: TypedContractMethod<[], [bigint], "view">;

  future_A_gamma_time: TypedContractMethod<[], [bigint], "view">;

  allowed_extra_profit: TypedContractMethod<[], [bigint], "view">;

  future_allowed_extra_profit: TypedContractMethod<[], [bigint], "view">;

  fee_gamma: TypedContractMethod<[], [bigint], "view">;

  future_fee_gamma: TypedContractMethod<[], [bigint], "view">;

  adjustment_step: TypedContractMethod<[], [bigint], "view">;

  future_adjustment_step: TypedContractMethod<[], [bigint], "view">;

  ma_half_time: TypedContractMethod<[], [bigint], "view">;

  future_ma_half_time: TypedContractMethod<[], [bigint], "view">;

  mid_fee: TypedContractMethod<[], [bigint], "view">;

  out_fee: TypedContractMethod<[], [bigint], "view">;

  admin_fee: TypedContractMethod<[], [bigint], "view">;

  future_mid_fee: TypedContractMethod<[], [bigint], "view">;

  future_out_fee: TypedContractMethod<[], [bigint], "view">;

  future_admin_fee: TypedContractMethod<[], [bigint], "view">;

  balances: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  D: TypedContractMethod<[], [bigint], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  xcp_profit: TypedContractMethod<[], [bigint], "view">;

  xcp_profit_a: TypedContractMethod<[], [bigint], "view">;

  virtual_price: TypedContractMethod<[], [bigint], "view">;

  admin_actions_deadline: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "exchange(uint256,uint256,uint256,uint256)"
  ): TypedContractMethod<
    [i: BigNumberish, j: BigNumberish, dx: BigNumberish, min_dy: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exchange(uint256,uint256,uint256,uint256,bool)"
  ): TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      use_eth: boolean
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exchange(uint256,uint256,uint256,uint256,bool,address)"
  ): TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      use_eth: boolean,
      receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exchange_underlying(uint256,uint256,uint256,uint256)"
  ): TypedContractMethod<
    [i: BigNumberish, j: BigNumberish, dx: BigNumberish, min_dy: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exchange_underlying(uint256,uint256,uint256,uint256,address)"
  ): TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exchange_extended"
  ): TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      use_eth: boolean,
      sender: AddressLike,
      receiver: AddressLike,
      cb: BytesLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "add_liquidity(uint256[2],uint256)"
  ): TypedContractMethod<
    [amounts: [BigNumberish, BigNumberish], min_mint_amount: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "add_liquidity(uint256[2],uint256,bool)"
  ): TypedContractMethod<
    [
      amounts: [BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      use_eth: boolean
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "add_liquidity(uint256[2],uint256,bool,address)"
  ): TypedContractMethod<
    [
      amounts: [BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      use_eth: boolean,
      receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "remove_liquidity(uint256,uint256[2])"
  ): TypedContractMethod<
    [_amount: BigNumberish, min_amounts: [BigNumberish, BigNumberish]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remove_liquidity(uint256,uint256[2],bool)"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      min_amounts: [BigNumberish, BigNumberish],
      use_eth: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remove_liquidity(uint256,uint256[2],bool,address)"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      min_amounts: [BigNumberish, BigNumberish],
      use_eth: boolean,
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remove_liquidity_one_coin(uint256,uint256,uint256)"
  ): TypedContractMethod<
    [token_amount: BigNumberish, i: BigNumberish, min_amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remove_liquidity_one_coin(uint256,uint256,uint256,bool)"
  ): TypedContractMethod<
    [
      token_amount: BigNumberish,
      i: BigNumberish,
      min_amount: BigNumberish,
      use_eth: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remove_liquidity_one_coin(uint256,uint256,uint256,bool,address)"
  ): TypedContractMethod<
    [
      token_amount: BigNumberish,
      i: BigNumberish,
      min_amount: BigNumberish,
      use_eth: boolean,
      receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claim_admin_fees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ramp_A_gamma"
  ): TypedContractMethod<
    [
      future_A: BigNumberish,
      future_gamma: BigNumberish,
      future_time: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stop_ramp_A_gamma"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "commit_new_parameters"
  ): TypedContractMethod<
    [
      _new_mid_fee: BigNumberish,
      _new_out_fee: BigNumberish,
      _new_admin_fee: BigNumberish,
      _new_fee_gamma: BigNumberish,
      _new_allowed_extra_profit: BigNumberish,
      _new_adjustment_step: BigNumberish,
      _new_ma_half_time: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "apply_new_parameters"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revert_new_parameters"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "get_dy"
  ): TypedContractMethod<
    [i: BigNumberish, j: BigNumberish, dx: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calc_token_amount"
  ): TypedContractMethod<
    [amounts: [BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calc_withdraw_one_coin"
  ): TypedContractMethod<
    [token_amount: BigNumberish, i: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "lp_price"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "A"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gamma"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "get_virtual_price"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "price_oracle"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      A: BigNumberish,
      gamma: BigNumberish,
      mid_fee: BigNumberish,
      out_fee: BigNumberish,
      allowed_extra_profit: BigNumberish,
      fee_gamma: BigNumberish,
      adjustment_step: BigNumberish,
      admin_fee: BigNumberish,
      ma_half_time: BigNumberish,
      initial_price: BigNumberish,
      _token: AddressLike,
      _coins: [AddressLike, AddressLike],
      _precisions: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "coins"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "price_scale"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "last_prices"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "last_prices_timestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initial_A_gamma"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "future_A_gamma"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initial_A_gamma_time"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "future_A_gamma_time"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowed_extra_profit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "future_allowed_extra_profit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fee_gamma"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "future_fee_gamma"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "adjustment_step"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "future_adjustment_step"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ma_half_time"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "future_ma_half_time"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mid_fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "out_fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin_fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "future_mid_fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "future_out_fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "future_admin_fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(nameOrSignature: "D"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "xcp_profit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "xcp_profit_a"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "virtual_price"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin_actions_deadline"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "TokenExchange"
  ): TypedContractEvent<
    TokenExchangeEvent.InputTuple,
    TokenExchangeEvent.OutputTuple,
    TokenExchangeEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquidity"
  ): TypedContractEvent<
    AddLiquidityEvent.InputTuple,
    AddLiquidityEvent.OutputTuple,
    AddLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquidity"
  ): TypedContractEvent<
    RemoveLiquidityEvent.InputTuple,
    RemoveLiquidityEvent.OutputTuple,
    RemoveLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquidityOne"
  ): TypedContractEvent<
    RemoveLiquidityOneEvent.InputTuple,
    RemoveLiquidityOneEvent.OutputTuple,
    RemoveLiquidityOneEvent.OutputObject
  >;
  getEvent(
    key: "CommitNewParameters"
  ): TypedContractEvent<
    CommitNewParametersEvent.InputTuple,
    CommitNewParametersEvent.OutputTuple,
    CommitNewParametersEvent.OutputObject
  >;
  getEvent(
    key: "NewParameters"
  ): TypedContractEvent<
    NewParametersEvent.InputTuple,
    NewParametersEvent.OutputTuple,
    NewParametersEvent.OutputObject
  >;
  getEvent(
    key: "RampAgamma"
  ): TypedContractEvent<
    RampAgammaEvent.InputTuple,
    RampAgammaEvent.OutputTuple,
    RampAgammaEvent.OutputObject
  >;
  getEvent(
    key: "StopRampA"
  ): TypedContractEvent<
    StopRampAEvent.InputTuple,
    StopRampAEvent.OutputTuple,
    StopRampAEvent.OutputObject
  >;
  getEvent(
    key: "ClaimAdminFee"
  ): TypedContractEvent<
    ClaimAdminFeeEvent.InputTuple,
    ClaimAdminFeeEvent.OutputTuple,
    ClaimAdminFeeEvent.OutputObject
  >;

  filters: {
    "TokenExchange(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TokenExchangeEvent.InputTuple,
      TokenExchangeEvent.OutputTuple,
      TokenExchangeEvent.OutputObject
    >;
    TokenExchange: TypedContractEvent<
      TokenExchangeEvent.InputTuple,
      TokenExchangeEvent.OutputTuple,
      TokenExchangeEvent.OutputObject
    >;

    "AddLiquidity(address,uint256[2],uint256,uint256)": TypedContractEvent<
      AddLiquidityEvent.InputTuple,
      AddLiquidityEvent.OutputTuple,
      AddLiquidityEvent.OutputObject
    >;
    AddLiquidity: TypedContractEvent<
      AddLiquidityEvent.InputTuple,
      AddLiquidityEvent.OutputTuple,
      AddLiquidityEvent.OutputObject
    >;

    "RemoveLiquidity(address,uint256[2],uint256)": TypedContractEvent<
      RemoveLiquidityEvent.InputTuple,
      RemoveLiquidityEvent.OutputTuple,
      RemoveLiquidityEvent.OutputObject
    >;
    RemoveLiquidity: TypedContractEvent<
      RemoveLiquidityEvent.InputTuple,
      RemoveLiquidityEvent.OutputTuple,
      RemoveLiquidityEvent.OutputObject
    >;

    "RemoveLiquidityOne(address,uint256,uint256,uint256)": TypedContractEvent<
      RemoveLiquidityOneEvent.InputTuple,
      RemoveLiquidityOneEvent.OutputTuple,
      RemoveLiquidityOneEvent.OutputObject
    >;
    RemoveLiquidityOne: TypedContractEvent<
      RemoveLiquidityOneEvent.InputTuple,
      RemoveLiquidityOneEvent.OutputTuple,
      RemoveLiquidityOneEvent.OutputObject
    >;

    "CommitNewParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CommitNewParametersEvent.InputTuple,
      CommitNewParametersEvent.OutputTuple,
      CommitNewParametersEvent.OutputObject
    >;
    CommitNewParameters: TypedContractEvent<
      CommitNewParametersEvent.InputTuple,
      CommitNewParametersEvent.OutputTuple,
      CommitNewParametersEvent.OutputObject
    >;

    "NewParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      NewParametersEvent.InputTuple,
      NewParametersEvent.OutputTuple,
      NewParametersEvent.OutputObject
    >;
    NewParameters: TypedContractEvent<
      NewParametersEvent.InputTuple,
      NewParametersEvent.OutputTuple,
      NewParametersEvent.OutputObject
    >;

    "RampAgamma(uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      RampAgammaEvent.InputTuple,
      RampAgammaEvent.OutputTuple,
      RampAgammaEvent.OutputObject
    >;
    RampAgamma: TypedContractEvent<
      RampAgammaEvent.InputTuple,
      RampAgammaEvent.OutputTuple,
      RampAgammaEvent.OutputObject
    >;

    "StopRampA(uint256,uint256,uint256)": TypedContractEvent<
      StopRampAEvent.InputTuple,
      StopRampAEvent.OutputTuple,
      StopRampAEvent.OutputObject
    >;
    StopRampA: TypedContractEvent<
      StopRampAEvent.InputTuple,
      StopRampAEvent.OutputTuple,
      StopRampAEvent.OutputObject
    >;

    "ClaimAdminFee(address,uint256)": TypedContractEvent<
      ClaimAdminFeeEvent.InputTuple,
      ClaimAdminFeeEvent.OutputTuple,
      ClaimAdminFeeEvent.OutputObject
    >;
    ClaimAdminFee: TypedContractEvent<
      ClaimAdminFeeEvent.InputTuple,
      ClaimAdminFeeEvent.OutputTuple,
      ClaimAdminFeeEvent.OutputObject
    >;
  };
}
